
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  08006f14  08006f14  00007f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d84  08007d84  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007d84  08007d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d8c  08007d8c  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d8c  08007d8c  00008d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007d94  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e78  20000018  08007dac  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e90  08007dac  00009e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aef6  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab2  00000000  00000000  00023f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  000279f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e6  00000000  00000000  00029208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002431c  00000000  00000000  0002a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d022  00000000  00000000  0004e80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de089  00000000  00000000  0006b82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001498b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006684  00000000  00000000  001498f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  0014ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006efc 	.word	0x08006efc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08006efc 	.word	0x08006efc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
	int done=1;
 8000516:	2301      	movs	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
	while(done)
 800051a:	e19b      	b.n	8000854 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000522:	48b3      	ldr	r0, [pc, #716]	@ (80007f0 <Get_Key+0x2e0>)
 8000524:	f001 fc20 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	48b0      	ldr	r0, [pc, #704]	@ (80007f0 <Get_Key+0x2e0>)
 800052e:	f001 fc1b 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000532:	2200      	movs	r2, #0
 8000534:	2120      	movs	r1, #32
 8000536:	48ae      	ldr	r0, [pc, #696]	@ (80007f0 <Get_Key+0x2e0>)
 8000538:	f001 fc16 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	48ab      	ldr	r0, [pc, #684]	@ (80007f0 <Get_Key+0x2e0>)
 8000542:	f001 fc11 	bl	8001d68 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000546:	2140      	movs	r1, #64	@ 0x40
 8000548:	48a9      	ldr	r0, [pc, #676]	@ (80007f0 <Get_Key+0x2e0>)
 800054a:	f001 fbf5 	bl	8001d38 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00b      	beq.n	800056c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000554:	bf00      	nop
 8000556:	2140      	movs	r1, #64	@ 0x40
 8000558:	48a5      	ldr	r0, [pc, #660]	@ (80007f0 <Get_Key+0x2e0>)
 800055a:	f001 fbed 	bl	8001d38 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f8      	bne.n	8000556 <Get_Key+0x46>
		key='1';
 8000564:	4ba3      	ldr	r3, [pc, #652]	@ (80007f4 <Get_Key+0x2e4>)
 8000566:	2231      	movs	r2, #49	@ 0x31
 8000568:	701a      	strb	r2, [r3, #0]
		break;
 800056a:	e177      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	48a2      	ldr	r0, [pc, #648]	@ (80007f8 <Get_Key+0x2e8>)
 8000570:	f001 fbe2 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00b      	beq.n	8000592 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800057a:	bf00      	nop
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	489e      	ldr	r0, [pc, #632]	@ (80007f8 <Get_Key+0x2e8>)
 8000580:	f001 fbda 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f8      	bne.n	800057c <Get_Key+0x6c>
		key='4';
 800058a:	4b9a      	ldr	r3, [pc, #616]	@ (80007f4 <Get_Key+0x2e4>)
 800058c:	2234      	movs	r2, #52	@ 0x34
 800058e:	701a      	strb	r2, [r3, #0]
		break;
 8000590:	e164      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000596:	4899      	ldr	r0, [pc, #612]	@ (80007fc <Get_Key+0x2ec>)
 8000598:	f001 fbce 	bl	8001d38 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00c      	beq.n	80005bc <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005a2:	bf00      	nop
 80005a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005a8:	4894      	ldr	r0, [pc, #592]	@ (80007fc <Get_Key+0x2ec>)
 80005aa:	f001 fbc5 	bl	8001d38 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <Get_Key+0x94>
		key='7';
 80005b4:	4b8f      	ldr	r3, [pc, #572]	@ (80007f4 <Get_Key+0x2e4>)
 80005b6:	2237      	movs	r2, #55	@ 0x37
 80005b8:	701a      	strb	r2, [r3, #0]
		break;
 80005ba:	e14f      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c0:	488e      	ldr	r0, [pc, #568]	@ (80007fc <Get_Key+0x2ec>)
 80005c2:	f001 fbb9 	bl	8001d38 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00c      	beq.n	80005e6 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005cc:	bf00      	nop
 80005ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d2:	488a      	ldr	r0, [pc, #552]	@ (80007fc <Get_Key+0x2ec>)
 80005d4:	f001 fbb0 	bl	8001d38 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f7      	bne.n	80005ce <Get_Key+0xbe>
		key='*';
 80005de:	4b85      	ldr	r3, [pc, #532]	@ (80007f4 <Get_Key+0x2e4>)
 80005e0:	222a      	movs	r2, #42	@ 0x2a
 80005e2:	701a      	strb	r2, [r3, #0]
		break;
 80005e4:	e13a      	b.n	800085c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ec:	4880      	ldr	r0, [pc, #512]	@ (80007f0 <Get_Key+0x2e0>)
 80005ee:	f001 fbbb 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80005f2:	2201      	movs	r2, #1
 80005f4:	2110      	movs	r1, #16
 80005f6:	487e      	ldr	r0, [pc, #504]	@ (80007f0 <Get_Key+0x2e0>)
 80005f8:	f001 fbb6 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005fc:	2200      	movs	r2, #0
 80005fe:	2120      	movs	r1, #32
 8000600:	487b      	ldr	r0, [pc, #492]	@ (80007f0 <Get_Key+0x2e0>)
 8000602:	f001 fbb1 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	4879      	ldr	r0, [pc, #484]	@ (80007f0 <Get_Key+0x2e0>)
 800060c:	f001 fbac 	bl	8001d68 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000610:	2140      	movs	r1, #64	@ 0x40
 8000612:	4877      	ldr	r0, [pc, #476]	@ (80007f0 <Get_Key+0x2e0>)
 8000614:	f001 fb90 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00b      	beq.n	8000636 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800061e:	bf00      	nop
 8000620:	2140      	movs	r1, #64	@ 0x40
 8000622:	4873      	ldr	r0, [pc, #460]	@ (80007f0 <Get_Key+0x2e0>)
 8000624:	f001 fb88 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1f8      	bne.n	8000620 <Get_Key+0x110>
		key='2';
 800062e:	4b71      	ldr	r3, [pc, #452]	@ (80007f4 <Get_Key+0x2e4>)
 8000630:	2232      	movs	r2, #50	@ 0x32
 8000632:	701a      	strb	r2, [r3, #0]
		break;
 8000634:	e112      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	486f      	ldr	r0, [pc, #444]	@ (80007f8 <Get_Key+0x2e8>)
 800063a:	f001 fb7d 	bl	8001d38 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00b      	beq.n	800065c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000644:	bf00      	nop
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	486b      	ldr	r0, [pc, #428]	@ (80007f8 <Get_Key+0x2e8>)
 800064a:	f001 fb75 	bl	8001d38 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f8      	bne.n	8000646 <Get_Key+0x136>
		key='5';
 8000654:	4b67      	ldr	r3, [pc, #412]	@ (80007f4 <Get_Key+0x2e4>)
 8000656:	2235      	movs	r2, #53	@ 0x35
 8000658:	701a      	strb	r2, [r3, #0]
		break;
 800065a:	e0ff      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800065c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000660:	4866      	ldr	r0, [pc, #408]	@ (80007fc <Get_Key+0x2ec>)
 8000662:	f001 fb69 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00c      	beq.n	8000686 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800066c:	bf00      	nop
 800066e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000672:	4862      	ldr	r0, [pc, #392]	@ (80007fc <Get_Key+0x2ec>)
 8000674:	f001 fb60 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f7      	bne.n	800066e <Get_Key+0x15e>
		key='8';
 800067e:	4b5d      	ldr	r3, [pc, #372]	@ (80007f4 <Get_Key+0x2e4>)
 8000680:	2238      	movs	r2, #56	@ 0x38
 8000682:	701a      	strb	r2, [r3, #0]
		break;
 8000684:	e0ea      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000686:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800068a:	485c      	ldr	r0, [pc, #368]	@ (80007fc <Get_Key+0x2ec>)
 800068c:	f001 fb54 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00c      	beq.n	80006b0 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000696:	bf00      	nop
 8000698:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069c:	4857      	ldr	r0, [pc, #348]	@ (80007fc <Get_Key+0x2ec>)
 800069e:	f001 fb4b 	bl	8001d38 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f7      	bne.n	8000698 <Get_Key+0x188>
		key='0';
 80006a8:	4b52      	ldr	r3, [pc, #328]	@ (80007f4 <Get_Key+0x2e4>)
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	701a      	strb	r2, [r3, #0]
		break;
 80006ae:	e0d5      	b.n	800085c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b6:	484e      	ldr	r0, [pc, #312]	@ (80007f0 <Get_Key+0x2e0>)
 80006b8:	f001 fb56 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	484b      	ldr	r0, [pc, #300]	@ (80007f0 <Get_Key+0x2e0>)
 80006c2:	f001 fb51 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006c6:	2201      	movs	r2, #1
 80006c8:	2120      	movs	r1, #32
 80006ca:	4849      	ldr	r0, [pc, #292]	@ (80007f0 <Get_Key+0x2e0>)
 80006cc:	f001 fb4c 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	4846      	ldr	r0, [pc, #280]	@ (80007f0 <Get_Key+0x2e0>)
 80006d6:	f001 fb47 	bl	8001d68 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006da:	2140      	movs	r1, #64	@ 0x40
 80006dc:	4844      	ldr	r0, [pc, #272]	@ (80007f0 <Get_Key+0x2e0>)
 80006de:	f001 fb2b 	bl	8001d38 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00b      	beq.n	8000700 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006e8:	bf00      	nop
 80006ea:	2140      	movs	r1, #64	@ 0x40
 80006ec:	4840      	ldr	r0, [pc, #256]	@ (80007f0 <Get_Key+0x2e0>)
 80006ee:	f001 fb23 	bl	8001d38 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f8      	bne.n	80006ea <Get_Key+0x1da>
		key='3';
 80006f8:	4b3e      	ldr	r3, [pc, #248]	@ (80007f4 <Get_Key+0x2e4>)
 80006fa:	2233      	movs	r2, #51	@ 0x33
 80006fc:	701a      	strb	r2, [r3, #0]
		break;
 80006fe:	e0ad      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	483d      	ldr	r0, [pc, #244]	@ (80007f8 <Get_Key+0x2e8>)
 8000704:	f001 fb18 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00b      	beq.n	8000726 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800070e:	bf00      	nop
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	4839      	ldr	r0, [pc, #228]	@ (80007f8 <Get_Key+0x2e8>)
 8000714:	f001 fb10 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f8      	bne.n	8000710 <Get_Key+0x200>
		key='6';
 800071e:	4b35      	ldr	r3, [pc, #212]	@ (80007f4 <Get_Key+0x2e4>)
 8000720:	2236      	movs	r2, #54	@ 0x36
 8000722:	701a      	strb	r2, [r3, #0]
		break;
 8000724:	e09a      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072a:	4834      	ldr	r0, [pc, #208]	@ (80007fc <Get_Key+0x2ec>)
 800072c:	f001 fb04 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00c      	beq.n	8000750 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000736:	bf00      	nop
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	482f      	ldr	r0, [pc, #188]	@ (80007fc <Get_Key+0x2ec>)
 800073e:	f001 fafb 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f7      	bne.n	8000738 <Get_Key+0x228>
		key='9';
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <Get_Key+0x2e4>)
 800074a:	2239      	movs	r2, #57	@ 0x39
 800074c:	701a      	strb	r2, [r3, #0]
		break;
 800074e:	e085      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000754:	4829      	ldr	r0, [pc, #164]	@ (80007fc <Get_Key+0x2ec>)
 8000756:	f001 faef 	bl	8001d38 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00c      	beq.n	800077a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000760:	bf00      	nop
 8000762:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000766:	4825      	ldr	r0, [pc, #148]	@ (80007fc <Get_Key+0x2ec>)
 8000768:	f001 fae6 	bl	8001d38 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f7      	bne.n	8000762 <Get_Key+0x252>
		key='#';
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <Get_Key+0x2e4>)
 8000774:	2223      	movs	r2, #35	@ 0x23
 8000776:	701a      	strb	r2, [r3, #0]
		break;
 8000778:	e070      	b.n	800085c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000780:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <Get_Key+0x2e0>)
 8000782:	f001 faf1 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	4819      	ldr	r0, [pc, #100]	@ (80007f0 <Get_Key+0x2e0>)
 800078c:	f001 faec 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <Get_Key+0x2e0>)
 8000796:	f001 fae7 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800079a:	2201      	movs	r2, #1
 800079c:	2108      	movs	r1, #8
 800079e:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <Get_Key+0x2e0>)
 80007a0:	f001 fae2 	bl	8001d68 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007a4:	2140      	movs	r1, #64	@ 0x40
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <Get_Key+0x2e0>)
 80007a8:	f001 fac6 	bl	8001d38 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00b      	beq.n	80007ca <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007b2:	bf00      	nop
 80007b4:	2140      	movs	r1, #64	@ 0x40
 80007b6:	480e      	ldr	r0, [pc, #56]	@ (80007f0 <Get_Key+0x2e0>)
 80007b8:	f001 fabe 	bl	8001d38 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f8      	bne.n	80007b4 <Get_Key+0x2a4>
		key='A';
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <Get_Key+0x2e4>)
 80007c4:	2241      	movs	r2, #65	@ 0x41
 80007c6:	701a      	strb	r2, [r3, #0]
		break;
 80007c8:	e048      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <Get_Key+0x2e8>)
 80007ce:	f001 fab3 	bl	8001d38 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d013      	beq.n	8000800 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007d8:	bf00      	nop
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <Get_Key+0x2e8>)
 80007de:	f001 faab 	bl	8001d38 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f8      	bne.n	80007da <Get_Key+0x2ca>
		key='B';
 80007e8:	4b02      	ldr	r3, [pc, #8]	@ (80007f4 <Get_Key+0x2e4>)
 80007ea:	2242      	movs	r2, #66	@ 0x42
 80007ec:	701a      	strb	r2, [r3, #0]
		break;
 80007ee:	e035      	b.n	800085c <Get_Key+0x34c>
 80007f0:	40020400 	.word	0x40020400
 80007f4:	20000034 	.word	0x20000034
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000804:	481a      	ldr	r0, [pc, #104]	@ (8000870 <Get_Key+0x360>)
 8000806:	f001 fa97 	bl	8001d38 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00c      	beq.n	800082a <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000810:	bf00      	nop
 8000812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000816:	4816      	ldr	r0, [pc, #88]	@ (8000870 <Get_Key+0x360>)
 8000818:	f001 fa8e 	bl	8001d38 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f7      	bne.n	8000812 <Get_Key+0x302>
		key='C';
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <Get_Key+0x364>)
 8000824:	2243      	movs	r2, #67	@ 0x43
 8000826:	701a      	strb	r2, [r3, #0]
		break;
 8000828:	e018      	b.n	800085c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800082a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800082e:	4810      	ldr	r0, [pc, #64]	@ (8000870 <Get_Key+0x360>)
 8000830:	f001 fa82 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00c      	beq.n	8000854 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800083a:	bf00      	nop
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <Get_Key+0x360>)
 8000842:	f001 fa79 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f7      	bne.n	800083c <Get_Key+0x32c>
		key='D';
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <Get_Key+0x364>)
 800084e:	2244      	movs	r2, #68	@ 0x44
 8000850:	701a      	strb	r2, [r3, #0]
		break;
 8000852:	e003      	b.n	800085c <Get_Key+0x34c>
	while(done)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f47f ae60 	bne.w	800051c <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800085c:	2120      	movs	r1, #32
 800085e:	4804      	ldr	r0, [pc, #16]	@ (8000870 <Get_Key+0x360>)
 8000860:	f001 fa9b 	bl	8001d9a <HAL_GPIO_TogglePin>
	return(key);
 8000864:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <Get_Key+0x364>)
 8000866:	781b      	ldrb	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020000 	.word	0x40020000
 8000874:	20000034 	.word	0x20000034

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f000 ffa4 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f838 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 f8fc 	bl	8000a80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000888:	f000 f8d0 	bl	8000a2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800088c:	f000 f8a0 	bl	80009d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000890:	f000 fb3a 	bl	8000f08 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000894:	f003 fd74 	bl	8004380 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <main+0x58>)
 800089a:	2100      	movs	r1, #0
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <main+0x5c>)
 800089e:	f003 fdb9 	bl	8004414 <osThreadNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <main+0x60>)
 80008a6:	6013      	str	r3, [r2, #0]

  /* creation of ArmingSystem */
  ArmingSystemHandle = osThreadNew(StartArmingSystem, NULL, &ArmingSystem_attributes);
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <main+0x64>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <main+0x68>)
 80008ae:	f003 fdb1 	bl	8004414 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <main+0x6c>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of LEDS */
  LEDSHandle = osThreadNew(StartLEDS, NULL, &LEDS_attributes);
 80008b8:	4a0b      	ldr	r2, [pc, #44]	@ (80008e8 <main+0x70>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <main+0x74>)
 80008be:	f003 fda9 	bl	8004414 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <main+0x78>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c8:	f003 fd7e 	bl	80043c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <main+0x54>
 80008d0:	08007d00 	.word	0x08007d00
 80008d4:	08000bfd 	.word	0x08000bfd
 80008d8:	200000d4 	.word	0x200000d4
 80008dc:	08007d24 	.word	0x08007d24
 80008e0:	08000c49 	.word	0x08000c49
 80008e4:	200000d8 	.word	0x200000d8
 80008e8:	08007d48 	.word	0x08007d48
 80008ec:	08000e89 	.word	0x08000e89
 80008f0:	200000dc 	.word	0x200000dc

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2234      	movs	r2, #52	@ 0x34
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 fac0 	bl	8006e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <SystemClock_Config+0xd4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a29      	ldr	r2, [pc, #164]	@ (80009c8 <SystemClock_Config+0xd4>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <SystemClock_Config+0xd4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <SystemClock_Config+0xd8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000940:	4a22      	ldr	r2, [pc, #136]	@ (80009cc <SystemClock_Config+0xd8>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2310      	movs	r3, #16
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000968:	2310      	movs	r3, #16
 800096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800096c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000970:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000972:	2304      	movs	r3, #4
 8000974:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fb6c 	bl	8003060 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800098e:	f000 fab5 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2302      	movs	r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 ffda 	bl	8002968 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ba:	f000 fa9f 	bl	8000efc <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	@ 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009d6:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <MX_I2C1_Init+0x58>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_I2C1_Init+0x50>)
 8000a0e:	f001 f9df 	bl	8001dd0 <HAL_I2C_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a18:	f000 fa70 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000038 	.word	0x20000038
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00061a80 	.word	0x00061a80

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_USART2_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a64:	f003 f83c 	bl	8003ae0 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 fa45 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	40004400 	.word	0x40004400

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b54      	ldr	r3, [pc, #336]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a53      	ldr	r2, [pc, #332]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b51      	ldr	r3, [pc, #324]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a4c      	ldr	r2, [pc, #304]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b46      	ldr	r3, [pc, #280]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a45      	ldr	r2, [pc, #276]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b43      	ldr	r3, [pc, #268]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b3f      	ldr	r3, [pc, #252]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8000b0c:	4838      	ldr	r0, [pc, #224]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b0e:	f001 f92b 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	4837      	ldr	r0, [pc, #220]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000b18:	f001 f926 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000b22:	4835      	ldr	r0, [pc, #212]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000b24:	f001 f920 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482d      	ldr	r0, [pc, #180]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b3c:	f000 ff68 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZ_Pin PC6 PC8 */
  GPIO_InitStruct.Pin = BUZ_Pin|GPIO_PIN_6|GPIO_PIN_8;
 8000b40:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4825      	ldr	r0, [pc, #148]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b5a:	f000 ff59 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000b76:	f000 ff4b 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000b7a:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4819      	ldr	r0, [pc, #100]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000b94:	f000 ff3c 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000bac:	f000 ff30 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000bb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000bc6:	f000 ff23 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000bde:	f000 ff17 	bl	8001a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020400 	.word	0x40020400

08000bfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (armed == 1){
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <StartDefaultTask+0x44>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d115      	bne.n	8000c38 <StartDefaultTask+0x3c>
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <StartDefaultTask+0x48>)
 8000c10:	f001 f892 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d009      	beq.n	8000c2e <StartDefaultTask+0x32>
			  osDelay (10000); // delay to give user time to disarm system
 8000c1a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c1e:	f003 fc8b 	bl	8004538 <osDelay>
			  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_3, 1); // turn on buzeer
 8000c22:	2201      	movs	r2, #1
 8000c24:	2108      	movs	r1, #8
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <StartDefaultTask+0x48>)
 8000c28:	f001 f89e 	bl	8001d68 <HAL_GPIO_WritePin>
 8000c2c:	e004      	b.n	8000c38 <StartDefaultTask+0x3c>
		  }else{
			  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_3, 0); // LED OFF
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2108      	movs	r1, #8
 8000c32:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <StartDefaultTask+0x48>)
 8000c34:	f001 f898 	bl	8001d68 <HAL_GPIO_WritePin>
		  }
	  }
	  osDelay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f003 fc7d 	bl	8004538 <osDelay>
	  if (armed == 1){
 8000c3e:	e7e1      	b.n	8000c04 <StartDefaultTask+0x8>
 8000c40:	200000e8 	.word	0x200000e8
 8000c44:	40020800 	.word	0x40020800

08000c48 <StartArmingSystem>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArmingSystem */
void StartArmingSystem(void *argument)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArmingSystem */
  /* Infinite loop */
  for(;;)
  {
	SSD1306_Clear();
 8000c50:	f000 fb7d 	bl	800134e <SSD1306_Clear>
	if (armed == 0){
 8000c54:	4b7e      	ldr	r3, [pc, #504]	@ (8000e50 <StartArmingSystem+0x208>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d168      	bne.n	8000d2e <StartArmingSystem+0xe6>
		SSD1306_GotoXY (0,0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fabc 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("Not Armed :", &Font_11x18, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	497b      	ldr	r1, [pc, #492]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000c68:	487b      	ldr	r0, [pc, #492]	@ (8000e58 <StartArmingSystem+0x210>)
 8000c6a:	f000 fb4b 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000c6e:	f000 fa0f 	bl	8001090 <SSD1306_UpdateScreen>

		password[0] = Get_Key();
 8000c72:	f7ff fc4d 	bl	8000510 <Get_Key>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b78      	ldr	r3, [pc, #480]	@ (8000e5c <StartArmingSystem+0x214>)
 8000c7c:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY (0, 30);
 8000c7e:	211e      	movs	r1, #30
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 faab 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("*", &Font_11x18, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	4972      	ldr	r1, [pc, #456]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000c8a:	4875      	ldr	r0, [pc, #468]	@ (8000e60 <StartArmingSystem+0x218>)
 8000c8c:	f000 fb3a 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000c90:	f000 f9fe 	bl	8001090 <SSD1306_UpdateScreen>

		password[1] = Get_Key();
 8000c94:	f7ff fc3c 	bl	8000510 <Get_Key>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8000e5c <StartArmingSystem+0x214>)
 8000c9e:	705a      	strb	r2, [r3, #1]
		SSD1306_GotoXY (0, 30);
 8000ca0:	211e      	movs	r1, #30
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 fa9a 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("**", &Font_11x18, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	496a      	ldr	r1, [pc, #424]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000cac:	486d      	ldr	r0, [pc, #436]	@ (8000e64 <StartArmingSystem+0x21c>)
 8000cae:	f000 fb29 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000cb2:	f000 f9ed 	bl	8001090 <SSD1306_UpdateScreen>

		password[2] = Get_Key();
 8000cb6:	f7ff fc2b 	bl	8000510 <Get_Key>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b67      	ldr	r3, [pc, #412]	@ (8000e5c <StartArmingSystem+0x214>)
 8000cc0:	709a      	strb	r2, [r3, #2]
		SSD1306_GotoXY (0, 30);
 8000cc2:	211e      	movs	r1, #30
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fa89 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("***", &Font_11x18, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4961      	ldr	r1, [pc, #388]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000cce:	4866      	ldr	r0, [pc, #408]	@ (8000e68 <StartArmingSystem+0x220>)
 8000cd0:	f000 fb18 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000cd4:	f000 f9dc 	bl	8001090 <SSD1306_UpdateScreen>

		password[3] = Get_Key();
 8000cd8:	f7ff fc1a 	bl	8000510 <Get_Key>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e5c <StartArmingSystem+0x214>)
 8000ce2:	70da      	strb	r2, [r3, #3]
		SSD1306_GotoXY (0, 30);
 8000ce4:	211e      	movs	r1, #30
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fa78 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("****", &Font_11x18, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	4959      	ldr	r1, [pc, #356]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000cf0:	485e      	ldr	r0, [pc, #376]	@ (8000e6c <StartArmingSystem+0x224>)
 8000cf2:	f000 fb07 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000cf6:	f000 f9cb 	bl	8001090 <SSD1306_UpdateScreen>
		HAL_UART_Transmit(&huart2, (uint8_t*)"save password: ", strlen("save password: "), HAL_MAX_DELAY);
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	220f      	movs	r2, #15
 8000d00:	495b      	ldr	r1, [pc, #364]	@ (8000e70 <StartArmingSystem+0x228>)
 8000d02:	485c      	ldr	r0, [pc, #368]	@ (8000e74 <StartArmingSystem+0x22c>)
 8000d04:	f002 ff3c 	bl	8003b80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)password, strlen(password), HAL_MAX_DELAY);
 8000d08:	4854      	ldr	r0, [pc, #336]	@ (8000e5c <StartArmingSystem+0x214>)
 8000d0a:	f7ff fa81 	bl	8000210 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	4951      	ldr	r1, [pc, #324]	@ (8000e5c <StartArmingSystem+0x214>)
 8000d18:	4856      	ldr	r0, [pc, #344]	@ (8000e74 <StartArmingSystem+0x22c>)
 8000d1a:	f002 ff31 	bl	8003b80 <HAL_UART_Transmit>

		osDelay(10000); // wait 10s to give time to the user to leave before arming system.
 8000d1e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d22:	f003 fc09 	bl	8004538 <osDelay>

		armed = 1;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	@ (8000e50 <StartArmingSystem+0x208>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e790      	b.n	8000c50 <StartArmingSystem+0x8>

	}else {

		SSD1306_GotoXY (0,0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 fa53 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("Armed :", &Font_11x18, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	4946      	ldr	r1, [pc, #280]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000d3a:	484f      	ldr	r0, [pc, #316]	@ (8000e78 <StartArmingSystem+0x230>)
 8000d3c:	f000 fae2 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d40:	f000 f9a6 	bl	8001090 <SSD1306_UpdateScreen>

		entry[0] = Get_Key();
 8000d44:	f7ff fbe4 	bl	8000510 <Get_Key>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e7c <StartArmingSystem+0x234>)
 8000d4e:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY (0, 30);
 8000d50:	211e      	movs	r1, #30
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fa42 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("*", &Font_11x18, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	493e      	ldr	r1, [pc, #248]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000d5c:	4840      	ldr	r0, [pc, #256]	@ (8000e60 <StartArmingSystem+0x218>)
 8000d5e:	f000 fad1 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d62:	f000 f995 	bl	8001090 <SSD1306_UpdateScreen>

		entry[1] = Get_Key();
 8000d66:	f7ff fbd3 	bl	8000510 <Get_Key>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b43      	ldr	r3, [pc, #268]	@ (8000e7c <StartArmingSystem+0x234>)
 8000d70:	705a      	strb	r2, [r3, #1]
		SSD1306_GotoXY (0, 30);
 8000d72:	211e      	movs	r1, #30
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fa31 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("**", &Font_11x18, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4935      	ldr	r1, [pc, #212]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000d7e:	4839      	ldr	r0, [pc, #228]	@ (8000e64 <StartArmingSystem+0x21c>)
 8000d80:	f000 fac0 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d84:	f000 f984 	bl	8001090 <SSD1306_UpdateScreen>

		entry[2] = Get_Key();
 8000d88:	f7ff fbc2 	bl	8000510 <Get_Key>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <StartArmingSystem+0x234>)
 8000d92:	709a      	strb	r2, [r3, #2]
		SSD1306_GotoXY (0, 30);
 8000d94:	211e      	movs	r1, #30
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 fa20 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("***", &Font_11x18, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	492d      	ldr	r1, [pc, #180]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000da0:	4831      	ldr	r0, [pc, #196]	@ (8000e68 <StartArmingSystem+0x220>)
 8000da2:	f000 faaf 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000da6:	f000 f973 	bl	8001090 <SSD1306_UpdateScreen>

		entry[3] = Get_Key();
 8000daa:	f7ff fbb1 	bl	8000510 <Get_Key>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b32      	ldr	r3, [pc, #200]	@ (8000e7c <StartArmingSystem+0x234>)
 8000db4:	70da      	strb	r2, [r3, #3]
		SSD1306_GotoXY (0, 30);
 8000db6:	211e      	movs	r1, #30
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fa0f 	bl	80011dc <SSD1306_GotoXY>
		SSD1306_Puts ("****", &Font_11x18, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4924      	ldr	r1, [pc, #144]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000dc2:	482a      	ldr	r0, [pc, #168]	@ (8000e6c <StartArmingSystem+0x224>)
 8000dc4:	f000 fa9e 	bl	8001304 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000dc8:	f000 f962 	bl	8001090 <SSD1306_UpdateScreen>

		HAL_UART_Transmit(&huart2, (uint8_t*)"the entry: ", strlen("the entry: "), HAL_MAX_DELAY);
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	220b      	movs	r2, #11
 8000dd2:	492b      	ldr	r1, [pc, #172]	@ (8000e80 <StartArmingSystem+0x238>)
 8000dd4:	4827      	ldr	r0, [pc, #156]	@ (8000e74 <StartArmingSystem+0x22c>)
 8000dd6:	f002 fed3 	bl	8003b80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) entry, strlen(entry), HAL_MAX_DELAY);
 8000dda:	4828      	ldr	r0, [pc, #160]	@ (8000e7c <StartArmingSystem+0x234>)
 8000ddc:	f7ff fa18 	bl	8000210 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295
 8000de8:	4924      	ldr	r1, [pc, #144]	@ (8000e7c <StartArmingSystem+0x234>)
 8000dea:	4822      	ldr	r0, [pc, #136]	@ (8000e74 <StartArmingSystem+0x22c>)
 8000dec:	f002 fec8 	bl	8003b80 <HAL_UART_Transmit>

		int equal = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
		for (int i = 0 ; i <4 ; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	e00e      	b.n	8000e18 <StartArmingSystem+0x1d0>
			if (password[i] != entry[i]){
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <StartArmingSystem+0x214>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	491e      	ldr	r1, [pc, #120]	@ (8000e7c <StartArmingSystem+0x234>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	440b      	add	r3, r1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d001      	beq.n	8000e12 <StartArmingSystem+0x1ca>
				equal = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
		for (int i = 0 ; i <4 ; i++){
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	dded      	ble.n	8000dfa <StartArmingSystem+0x1b2>
			}
		}

		// strncmp(password, entry, strlen(password)) == 0
		if (equal){
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <StartArmingSystem+0x1ee>
			armed = 0;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <StartArmingSystem+0x208>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			memset (&password[0], 0, sizeof(password));
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <StartArmingSystem+0x214>)
 8000e30:	f006 f82a 	bl	8006e88 <memset>
 8000e34:	e70c      	b.n	8000c50 <StartArmingSystem+0x8>
		}else {
			SSD1306_GotoXY (0, 30);
 8000e36:	211e      	movs	r1, #30
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f9cf 	bl	80011dc <SSD1306_GotoXY>
			SSD1306_Puts ("Wrong Password!", &Font_11x18, 1);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4904      	ldr	r1, [pc, #16]	@ (8000e54 <StartArmingSystem+0x20c>)
 8000e42:	4810      	ldr	r0, [pc, #64]	@ (8000e84 <StartArmingSystem+0x23c>)
 8000e44:	f000 fa5e 	bl	8001304 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000e48:	f000 f922 	bl	8001090 <SSD1306_UpdateScreen>
	SSD1306_Clear();
 8000e4c:	e700      	b.n	8000c50 <StartArmingSystem+0x8>
 8000e4e:	bf00      	nop
 8000e50:	200000e8 	.word	0x200000e8
 8000e54:	20000000 	.word	0x20000000
 8000e58:	08006f38 	.word	0x08006f38
 8000e5c:	200000e4 	.word	0x200000e4
 8000e60:	08006f44 	.word	0x08006f44
 8000e64:	08006f48 	.word	0x08006f48
 8000e68:	08006f4c 	.word	0x08006f4c
 8000e6c:	08006f50 	.word	0x08006f50
 8000e70:	08006f58 	.word	0x08006f58
 8000e74:	2000008c 	.word	0x2000008c
 8000e78:	08006f68 	.word	0x08006f68
 8000e7c:	200000e0 	.word	0x200000e0
 8000e80:	08006f70 	.word	0x08006f70
 8000e84:	08006f7c 	.word	0x08006f7c

08000e88 <StartLEDS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDS */
void StartLEDS(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDS */
  /* Infinite loop */
  for(;;)
  {
	if (armed == 0){
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <StartLEDS+0x48>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10b      	bne.n	8000eb0 <StartLEDS+0x28>
		HAL_GPIO_WritePin (GPIOC, GPIO_PIN_8, GPIO_PIN_RESET) ; // Red LED
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <StartLEDS+0x4c>)
 8000ea0:	f000 ff62 	bl	8001d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOC, GPIO_PIN_6, GPIO_PIN_SET) ; 	// Green LED
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2140      	movs	r1, #64	@ 0x40
 8000ea8:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <StartLEDS+0x4c>)
 8000eaa:	f000 ff5d 	bl	8001d68 <HAL_GPIO_WritePin>
 8000eae:	e00a      	b.n	8000ec6 <StartLEDS+0x3e>
	}else{
		HAL_GPIO_WritePin (GPIOC, GPIO_PIN_8, GPIO_PIN_SET) ; // Red LED
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <StartLEDS+0x4c>)
 8000eb8:	f000 ff56 	bl	8001d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOC, GPIO_PIN_6, GPIO_PIN_RESET) ; 	// Green LED
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2140      	movs	r1, #64	@ 0x40
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <StartLEDS+0x4c>)
 8000ec2:	f000 ff51 	bl	8001d68 <HAL_GPIO_WritePin>
	}
    osDelay(500);
 8000ec6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eca:	f003 fb35 	bl	8004538 <osDelay>
	if (armed == 0){
 8000ece:	e7df      	b.n	8000e90 <StartLEDS+0x8>
 8000ed0:	200000e8 	.word	0x200000e8
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eea:	f000 fc8f 	bl	800180c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <Error_Handler+0x8>

08000f08 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f0e:	f000 fa27 	bl	8001360 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f16:	2201      	movs	r2, #1
 8000f18:	2178      	movs	r1, #120	@ 0x78
 8000f1a:	485b      	ldr	r0, [pc, #364]	@ (8001088 <SSD1306_Init+0x180>)
 8000f1c:	f001 f99a 	bl	8002254 <HAL_I2C_IsDeviceReady>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e0a9      	b.n	800107e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f2a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000f2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f30:	e002      	b.n	8000f38 <SSD1306_Init+0x30>
		p--;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f9      	bne.n	8000f32 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f3e:	22ae      	movs	r2, #174	@ 0xae
 8000f40:	2100      	movs	r1, #0
 8000f42:	2078      	movs	r0, #120	@ 0x78
 8000f44:	f000 fa88 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2078      	movs	r0, #120	@ 0x78
 8000f4e:	f000 fa83 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f52:	2210      	movs	r2, #16
 8000f54:	2100      	movs	r1, #0
 8000f56:	2078      	movs	r0, #120	@ 0x78
 8000f58:	f000 fa7e 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f5c:	22b0      	movs	r2, #176	@ 0xb0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2078      	movs	r0, #120	@ 0x78
 8000f62:	f000 fa79 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f66:	22c8      	movs	r2, #200	@ 0xc8
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2078      	movs	r0, #120	@ 0x78
 8000f6c:	f000 fa74 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2078      	movs	r0, #120	@ 0x78
 8000f76:	f000 fa6f 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2078      	movs	r0, #120	@ 0x78
 8000f80:	f000 fa6a 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f84:	2240      	movs	r2, #64	@ 0x40
 8000f86:	2100      	movs	r1, #0
 8000f88:	2078      	movs	r0, #120	@ 0x78
 8000f8a:	f000 fa65 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f8e:	2281      	movs	r2, #129	@ 0x81
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	@ 0x78
 8000f94:	f000 fa60 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f98:	22ff      	movs	r2, #255	@ 0xff
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2078      	movs	r0, #120	@ 0x78
 8000f9e:	f000 fa5b 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fa2:	22a1      	movs	r2, #161	@ 0xa1
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2078      	movs	r0, #120	@ 0x78
 8000fa8:	f000 fa56 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000fac:	22a6      	movs	r2, #166	@ 0xa6
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2078      	movs	r0, #120	@ 0x78
 8000fb2:	f000 fa51 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000fb6:	22a8      	movs	r2, #168	@ 0xa8
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	@ 0x78
 8000fbc:	f000 fa4c 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fc0:	223f      	movs	r2, #63	@ 0x3f
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	@ 0x78
 8000fc6:	f000 fa47 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fca:	22a4      	movs	r2, #164	@ 0xa4
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	@ 0x78
 8000fd0:	f000 fa42 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fd4:	22d3      	movs	r2, #211	@ 0xd3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	@ 0x78
 8000fda:	f000 fa3d 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	@ 0x78
 8000fe4:	f000 fa38 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fe8:	22d5      	movs	r2, #213	@ 0xd5
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	@ 0x78
 8000fee:	f000 fa33 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ff2:	22f0      	movs	r2, #240	@ 0xf0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	@ 0x78
 8000ff8:	f000 fa2e 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ffc:	22d9      	movs	r2, #217	@ 0xd9
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	@ 0x78
 8001002:	f000 fa29 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001006:	2222      	movs	r2, #34	@ 0x22
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	@ 0x78
 800100c:	f000 fa24 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001010:	22da      	movs	r2, #218	@ 0xda
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	@ 0x78
 8001016:	f000 fa1f 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800101a:	2212      	movs	r2, #18
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	@ 0x78
 8001020:	f000 fa1a 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001024:	22db      	movs	r2, #219	@ 0xdb
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	@ 0x78
 800102a:	f000 fa15 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800102e:	2220      	movs	r2, #32
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	@ 0x78
 8001034:	f000 fa10 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001038:	228d      	movs	r2, #141	@ 0x8d
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	@ 0x78
 800103e:	f000 fa0b 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001042:	2214      	movs	r2, #20
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	@ 0x78
 8001048:	f000 fa06 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800104c:	22af      	movs	r2, #175	@ 0xaf
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	@ 0x78
 8001052:	f000 fa01 	bl	8001458 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001056:	222e      	movs	r2, #46	@ 0x2e
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	@ 0x78
 800105c:	f000 f9fc 	bl	8001458 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f843 	bl	80010ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001066:	f000 f813 	bl	8001090 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <SSD1306_Init+0x184>)
 800106c:	2200      	movs	r2, #0
 800106e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <SSD1306_Init+0x184>)
 8001072:	2200      	movs	r2, #0
 8001074:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SSD1306_Init+0x184>)
 8001078:	2201      	movs	r2, #1
 800107a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800107c:	2301      	movs	r3, #1
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000038 	.word	0x20000038
 800108c:	200004ec 	.word	0x200004ec

08001090 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	e01d      	b.n	80010d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3b50      	subs	r3, #80	@ 0x50
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	@ 0x78
 80010a8:	f000 f9d6 	bl	8001458 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	@ 0x78
 80010b2:	f000 f9d1 	bl	8001458 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010b6:	2210      	movs	r2, #16
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	@ 0x78
 80010bc:	f000 f9cc 	bl	8001458 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	01db      	lsls	r3, r3, #7
 80010c4:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <SSD1306_UpdateScreen+0x58>)
 80010c6:	441a      	add	r2, r3
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	2140      	movs	r1, #64	@ 0x40
 80010cc:	2078      	movs	r0, #120	@ 0x78
 80010ce:	f000 f95d 	bl	800138c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	3301      	adds	r3, #1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d9de      	bls.n	800109c <SSD1306_UpdateScreen+0xc>
	}
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000ec 	.word	0x200000ec

080010ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <SSD1306_Fill+0x14>
 80010fc:	2300      	movs	r3, #0
 80010fe:	e000      	b.n	8001102 <SSD1306_Fill+0x16>
 8001100:	23ff      	movs	r3, #255	@ 0xff
 8001102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001106:	4619      	mov	r1, r3
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <SSD1306_Fill+0x2c>)
 800110a:	f005 febd 	bl	8006e88 <memset>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000ec 	.word	0x200000ec

0800111c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	460b      	mov	r3, r1
 8001128:	80bb      	strh	r3, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	70fb      	strb	r3, [r7, #3]
	if (
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b7f      	cmp	r3, #127	@ 0x7f
 8001132:	d848      	bhi.n	80011c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	2b3f      	cmp	r3, #63	@ 0x3f
 8001138:	d845      	bhi.n	80011c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <SSD1306_DrawPixel+0xb8>)
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d11a      	bne.n	800118c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001156:	88fa      	ldrh	r2, [r7, #6]
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	b298      	uxth	r0, r3
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <SSD1306_DrawPixel+0xbc>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	b25a      	sxtb	r2, r3
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b259      	sxtb	r1, r3
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	4603      	mov	r3, r0
 8001180:	01db      	lsls	r3, r3, #7
 8001182:	4413      	add	r3, r2
 8001184:	b2c9      	uxtb	r1, r1
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <SSD1306_DrawPixel+0xbc>)
 8001188:	54d1      	strb	r1, [r2, r3]
 800118a:	e01d      	b.n	80011c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	b298      	uxth	r0, r3
 8001194:	4603      	mov	r3, r0
 8001196:	01db      	lsls	r3, r3, #7
 8001198:	4413      	add	r3, r2
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <SSD1306_DrawPixel+0xbc>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	4013      	ands	r3, r2
 80011b4:	b259      	sxtb	r1, r3
 80011b6:	88fa      	ldrh	r2, [r7, #6]
 80011b8:	4603      	mov	r3, r0
 80011ba:	01db      	lsls	r3, r3, #7
 80011bc:	4413      	add	r3, r2
 80011be:	b2c9      	uxtb	r1, r1
 80011c0:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <SSD1306_DrawPixel+0xbc>)
 80011c2:	54d1      	strb	r1, [r2, r3]
 80011c4:	e000      	b.n	80011c8 <SSD1306_DrawPixel+0xac>
		return;
 80011c6:	bf00      	nop
	}
}
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200004ec 	.word	0x200004ec
 80011d8:	200000ec 	.word	0x200000ec

080011dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011ec:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <SSD1306_GotoXY+0x28>)
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <SSD1306_GotoXY+0x28>)
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	8053      	strh	r3, [r2, #2]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200004ec 	.word	0x200004ec

08001208 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001218:	4b39      	ldr	r3, [pc, #228]	@ (8001300 <SSD1306_Putc+0xf8>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
	if (
 8001224:	2b7f      	cmp	r3, #127	@ 0x7f
 8001226:	dc07      	bgt.n	8001238 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001228:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <SSD1306_Putc+0xf8>)
 800122a:	885b      	ldrh	r3, [r3, #2]
 800122c:	461a      	mov	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001234:	2b3f      	cmp	r3, #63	@ 0x3f
 8001236:	dd01      	ble.n	800123c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e05d      	b.n	80012f8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e04b      	b.n	80012da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	3b20      	subs	r3, #32
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	7849      	ldrb	r1, [r1, #1]
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	4619      	mov	r1, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	440b      	add	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	e030      	b.n	80012c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d010      	beq.n	8001298 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001276:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <SSD1306_Putc+0xf8>)
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b298      	uxth	r0, r3
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <SSD1306_Putc+0xf8>)
 8001284:	885a      	ldrh	r2, [r3, #2]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	79ba      	ldrb	r2, [r7, #6]
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff ff43 	bl	800111c <SSD1306_DrawPixel>
 8001296:	e014      	b.n	80012c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <SSD1306_Putc+0xf8>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	b298      	uxth	r0, r3
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <SSD1306_Putc+0xf8>)
 80012a6:	885a      	ldrh	r2, [r3, #2]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b299      	uxth	r1, r3
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	f7ff ff2d 	bl	800111c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	3301      	adds	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d3c8      	bcc.n	8001266 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	461a      	mov	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d3ad      	bcc.n	8001242 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <SSD1306_Putc+0xf8>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <SSD1306_Putc+0xf8>)
 80012f4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200004ec 	.word	0x200004ec

08001304 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001312:	e012      	b.n	800133a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff73 	bl	8001208 <SSD1306_Putc>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d002      	beq.n	8001334 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	e008      	b.n	8001346 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e8      	bne.n	8001314 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	781b      	ldrb	r3, [r3, #0]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff feca 	bl	80010ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001358:	f7ff fe9a 	bl	8001090 <SSD1306_UpdateScreen>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <ssd1306_I2C_Init+0x28>)
 8001368:	607b      	str	r3, [r7, #4]
	while(p>0)
 800136a:	e002      	b.n	8001372 <ssd1306_I2C_Init+0x12>
		p--;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f9      	bne.n	800136c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0003d090 	.word	0x0003d090

0800138c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b0c7      	sub	sp, #284	@ 0x11c
 8001390:	af02      	add	r7, sp, #8
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800139a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800139e:	600a      	str	r2, [r1, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013aa:	4622      	mov	r2, r4
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013b6:	4602      	mov	r2, r0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013c2:	460a      	mov	r2, r1
 80013c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013d2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80013e0:	e015      	b.n	800140e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013ea:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	441a      	add	r2, r3
 80013f2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013f6:	3301      	adds	r3, #1
 80013f8:	7811      	ldrb	r1, [r2, #0]
 80013fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001402:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001404:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001408:	3301      	adds	r3, #1
 800140a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800140e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001412:	b29b      	uxth	r3, r3
 8001414:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001418:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800141c:	8812      	ldrh	r2, [r2, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d8df      	bhi.n	80013e2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001426:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b299      	uxth	r1, r3
 800142e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001432:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	200a      	movs	r0, #10
 8001442:	9000      	str	r0, [sp, #0]
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <ssd1306_I2C_WriteMulti+0xc8>)
 8001446:	f000 fe07 	bl	8002058 <HAL_I2C_Master_Transmit>
}
 800144a:	bf00      	nop
 800144c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	20000038 	.word	0x20000038

08001458 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	460b      	mov	r3, r1
 8001464:	71bb      	strb	r3, [r7, #6]
 8001466:	4613      	mov	r3, r2
 8001468:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	b299      	uxth	r1, r3
 8001476:	f107 020c 	add.w	r2, r7, #12
 800147a:	230a      	movs	r3, #10
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2302      	movs	r3, #2
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <ssd1306_I2C_Write+0x38>)
 8001482:	f000 fde9 	bl	8002058 <HAL_I2C_Master_Transmit>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000038 	.word	0x20000038

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_MspInit+0x54>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_MspInit+0x54>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_MspInit+0x54>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_MspInit+0x54>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_MspInit+0x54>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_MspInit+0x54>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	f06f 0001 	mvn.w	r0, #1
 80014da:	f000 fa6f 	bl	80019bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12c      	bne.n	8001568 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800152a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153c:	2304      	movs	r3, #4
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	@ (8001578 <HAL_I2C_MspInit+0x8c>)
 8001548:	f000 fa62 	bl	8001a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	@ 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <HAL_UART_MspInit+0x84>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d12b      	bne.n	80015f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_UART_MspInit+0x88>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a17      	ldr	r2, [pc, #92]	@ (8001604 <HAL_UART_MspInit+0x88>)
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_UART_MspInit+0x88>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_UART_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <HAL_UART_MspInit+0x88>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_UART_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015d6:	230c      	movs	r3, #12
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e6:	2307      	movs	r3, #7
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <HAL_UART_MspInit+0x8c>)
 80015f2:	f000 fa0d 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	@ 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004400 	.word	0x40004400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	@ 0x38
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_InitTick+0xe4>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a32      	ldr	r2, [pc, #200]	@ (80016f0 <HAL_InitTick+0xe4>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
 800162c:	4b30      	ldr	r3, [pc, #192]	@ (80016f0 <HAL_InitTick+0xe4>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001638:	f107 0210 	add.w	r2, r7, #16
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f001 faaa 	bl	8002b9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001652:	f001 fa7b 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8001656:	6378      	str	r0, [r7, #52]	@ 0x34
 8001658:	e004      	b.n	8001664 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800165a:	f001 fa77 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 800165e:	4603      	mov	r3, r0
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001666:	4a23      	ldr	r2, [pc, #140]	@ (80016f4 <HAL_InitTick+0xe8>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	3b01      	subs	r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001672:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_InitTick+0xec>)
 8001674:	4a21      	ldr	r2, [pc, #132]	@ (80016fc <HAL_InitTick+0xf0>)
 8001676:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001678:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <HAL_InitTick+0xec>)
 800167a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800167e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001680:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <HAL_InitTick+0xec>)
 8001682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001684:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <HAL_InitTick+0xec>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_InitTick+0xec>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_InitTick+0xec>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001698:	4817      	ldr	r0, [pc, #92]	@ (80016f8 <HAL_InitTick+0xec>)
 800169a:	f001 ff7f 	bl	800359c <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d11b      	bne.n	80016e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <HAL_InitTick+0xec>)
 80016ae:	f001 ffcf 	bl	8003650 <HAL_TIM_Base_Start_IT>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d111      	bne.n	80016e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016c0:	2036      	movs	r0, #54	@ 0x36
 80016c2:	f000 f997 	bl	80019f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d808      	bhi.n	80016de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	2036      	movs	r0, #54	@ 0x36
 80016d2:	f000 f973 	bl	80019bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_InitTick+0xf4>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e002      	b.n	80016e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3738      	adds	r7, #56	@ 0x38
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	200004f4 	.word	0x200004f4
 80016fc:	40001000 	.word	0x40001000
 8001700:	2000000c 	.word	0x2000000c

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <TIM6_DAC_IRQHandler+0x10>)
 8001742:	f001 fff5 	bl	8003730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200004f4 	.word	0x200004f4

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001778:	f7ff ffea 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f005 fb79 	bl	8006e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff f867 	bl	8000878 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017b8:	08007d94 	.word	0x08007d94
  ldr r2, =_sbss
 80017bc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017c0:	20004e90 	.word	0x20004e90

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f8d8 	bl	80019a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f7ff ff08 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fe4a 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000010 	.word	0x20000010
 8001830:	2000053c 	.word	0x2000053c

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000053c 	.word	0x2000053c

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	@ (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	@ (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	@ (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff4c 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ce:	f7ff ff61 	bl	8001894 <__NVIC_GetPriorityGrouping>
 80019d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	6978      	ldr	r0, [r7, #20]
 80019da:	f7ff ffb1 	bl	8001940 <NVIC_EncodePriority>
 80019de:	4602      	mov	r2, r0
 80019e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff80 	bl	80018ec <__NVIC_SetPriority>
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff54 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e165      	b.n	8001cf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8154 	bne.w	8001cf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80ae 	beq.w	8001cf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb2:	4a58      	ldr	r2, [pc, #352]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d18 <HAL_GPIO_Init+0x308>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x21a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d1c <HAL_GPIO_Init+0x30c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x216>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <HAL_GPIO_Init+0x310>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x212>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d28 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x20a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4a      	ldr	r2, [pc, #296]	@ (8001d2c <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a49      	ldr	r2, [pc, #292]	@ (8001d30 <HAL_GPIO_Init+0x320>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x202>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a31      	ldr	r2, [pc, #196]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae96 	bls.w	8001a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	041a      	lsls	r2, r3, #16
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	400b      	ands	r3, r1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e12b      	b.n	800203a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fb78 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	@ 0x24
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e34:	f000 fe8a 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8001e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a81      	ldr	r2, [pc, #516]	@ (8002044 <HAL_I2C_Init+0x274>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d807      	bhi.n	8001e54 <HAL_I2C_Init+0x84>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a80      	ldr	r2, [pc, #512]	@ (8002048 <HAL_I2C_Init+0x278>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	bf94      	ite	ls
 8001e4c:	2301      	movls	r3, #1
 8001e4e:	2300      	movhi	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e006      	b.n	8001e62 <HAL_I2C_Init+0x92>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a7d      	ldr	r2, [pc, #500]	@ (800204c <HAL_I2C_Init+0x27c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	bf94      	ite	ls
 8001e5c:	2301      	movls	r3, #1
 8001e5e:	2300      	movhi	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0e7      	b.n	800203a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a78      	ldr	r2, [pc, #480]	@ (8002050 <HAL_I2C_Init+0x280>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0c9b      	lsrs	r3, r3, #18
 8001e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a6a      	ldr	r2, [pc, #424]	@ (8002044 <HAL_I2C_Init+0x274>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d802      	bhi.n	8001ea4 <HAL_I2C_Init+0xd4>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	e009      	b.n	8001eb8 <HAL_I2C_Init+0xe8>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	4a69      	ldr	r2, [pc, #420]	@ (8002054 <HAL_I2C_Init+0x284>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	495c      	ldr	r1, [pc, #368]	@ (8002044 <HAL_I2C_Init+0x274>)
 8001ed4:	428b      	cmp	r3, r1
 8001ed6:	d819      	bhi.n	8001f0c <HAL_I2C_Init+0x13c>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e59      	subs	r1, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee6:	1c59      	adds	r1, r3, #1
 8001ee8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eec:	400b      	ands	r3, r1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_I2C_Init+0x138>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1e59      	subs	r1, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f06:	e051      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e04f      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_I2C_Init+0x168>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e012      	b.n	8001f5e <HAL_I2C_Init+0x18e>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Init+0x196>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e022      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <HAL_I2C_Init+0x1bc>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e58      	subs	r0, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f8a:	e00f      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	0099      	lsls	r1, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6809      	ldr	r1, [r1, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6911      	ldr	r1, [r2, #16]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68d2      	ldr	r2, [r2, #12]
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	000186a0 	.word	0x000186a0
 8002048:	001e847f 	.word	0x001e847f
 800204c:	003d08ff 	.word	0x003d08ff
 8002050:	431bde83 	.word	0x431bde83
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	461a      	mov	r2, r3
 8002064:	460b      	mov	r3, r1
 8002066:	817b      	strh	r3, [r7, #10]
 8002068:	4613      	mov	r3, r2
 800206a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff fbe2 	bl	8001834 <HAL_GetTick>
 8002070:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	f040 80e0 	bne.w	8002240 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2319      	movs	r3, #25
 8002086:	2201      	movs	r2, #1
 8002088:	4970      	ldr	r1, [pc, #448]	@ (800224c <HAL_I2C_Master_Transmit+0x1f4>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fa92 	bl	80025b4 <I2C_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
 8002098:	e0d3      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2C_Master_Transmit+0x50>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0cc      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ea>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d007      	beq.n	80020ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2221      	movs	r2, #33	@ 0x21
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2210      	movs	r2, #16
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	893a      	ldrh	r2, [r7, #8]
 80020fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4a50      	ldr	r2, [pc, #320]	@ (8002250 <HAL_I2C_Master_Transmit+0x1f8>)
 800210e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002110:	8979      	ldrh	r1, [r7, #10]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	6a3a      	ldr	r2, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f9ca 	bl	80024b0 <I2C_MasterRequestWrite>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e08d      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800213c:	e066      	b.n	800220c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb50 	bl	80027e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	2b04      	cmp	r3, #4
 8002154:	d107      	bne.n	8002166 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06b      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x188>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d017      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	6a39      	ldr	r1, [r7, #32]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fb47 	bl	8002878 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002206:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e01a      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d194      	bne.n	800213e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	00100002 	.word	0x00100002
 8002250:	ffff0000 	.word	0xffff0000

08002254 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	460b      	mov	r3, r1
 8002262:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff fae6 	bl	8001834 <HAL_GetTick>
 8002268:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b20      	cmp	r3, #32
 8002278:	f040 8111 	bne.w	800249e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2319      	movs	r3, #25
 8002282:	2201      	movs	r2, #1
 8002284:	4988      	ldr	r1, [pc, #544]	@ (80024a8 <HAL_I2C_IsDeviceReady+0x254>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f994 	bl	80025b4 <I2C_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
 8002294:	e104      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_I2C_IsDeviceReady+0x50>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0fd      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d007      	beq.n	80022ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2224      	movs	r2, #36	@ 0x24
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a70      	ldr	r2, [pc, #448]	@ (80024ac <HAL_I2C_IsDeviceReady+0x258>)
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f952 	bl	80025b4 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002324:	d103      	bne.n	800232e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800232c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0b6      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002332:	897b      	ldrh	r3, [r7, #10]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002340:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff fa77 	bl	8001834 <HAL_GetTick>
 8002346:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002376:	e025      	b.n	80023c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002378:	f7ff fa5c 	bl	8001834 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d302      	bcc.n	800238e <HAL_I2C_IsDeviceReady+0x13a>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	22a0      	movs	r2, #160	@ 0xa0
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80023ce:	d005      	beq.n	80023dc <HAL_I2C_IsDeviceReady+0x188>
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_I2C_IsDeviceReady+0x188>
 80023d6:	7dbb      	ldrb	r3, [r7, #22]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0cd      	beq.n	8002378 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d129      	bne.n	8002446 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002400:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	4921      	ldr	r1, [pc, #132]	@ (80024a8 <HAL_I2C_IsDeviceReady+0x254>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f8c6 	bl	80025b4 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e036      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e02c      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002454:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800245e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2319      	movs	r3, #25
 8002466:	2201      	movs	r2, #1
 8002468:	490f      	ldr	r1, [pc, #60]	@ (80024a8 <HAL_I2C_IsDeviceReady+0x254>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f8a2 	bl	80025b4 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e012      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3301      	adds	r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	f4ff af32 	bcc.w	80022ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000

080024b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	460b      	mov	r3, r1
 80024be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d006      	beq.n	80024da <I2C_MasterRequestWrite+0x2a>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d003      	beq.n	80024da <I2C_MasterRequestWrite+0x2a>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024d8:	d108      	bne.n	80024ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e00b      	b.n	8002504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d107      	bne.n	8002504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f84f 	bl	80025b4 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800252a:	d103      	bne.n	8002534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e035      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002540:	d108      	bne.n	8002554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e01b      	b.n	800258c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002554:	897b      	ldrh	r3, [r7, #10]
 8002556:	11db      	asrs	r3, r3, #7
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 0306 	and.w	r3, r3, #6
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f063 030f 	orn	r3, r3, #15
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	490e      	ldr	r1, [pc, #56]	@ (80025ac <I2C_MasterRequestWrite+0xfc>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f898 	bl	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e010      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <I2C_MasterRequestWrite+0x100>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f888 	bl	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00010008 	.word	0x00010008
 80025b0:	00010002 	.word	0x00010002

080025b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c4:	e048      	b.n	8002658 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d044      	beq.n	8002658 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7ff f931 	bl	8001834 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d139      	bne.n	8002658 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0c1b      	lsrs	r3, r3, #16
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10d      	bne.n	800260a <I2C_WaitOnFlagUntilTimeout+0x56>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	43da      	mvns	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	e00c      	b.n	8002624 <I2C_WaitOnFlagUntilTimeout+0x70>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	43da      	mvns	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4013      	ands	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	429a      	cmp	r2, r3
 8002628:	d116      	bne.n	8002658 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e023      	b.n	80026a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10d      	bne.n	800267e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	e00c      	b.n	8002698 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	43da      	mvns	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	429a      	cmp	r2, r3
 800269c:	d093      	beq.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026b6:	e071      	b.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c6:	d123      	bne.n	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e067      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002716:	d041      	beq.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002718:	f7ff f88c 	bl	8001834 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d302      	bcc.n	800272e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d136      	bne.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10c      	bne.n	8002752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	e00b      	b.n	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	43da      	mvns	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e021      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10c      	bne.n	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e00b      	b.n	80027d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf14      	ite	ne
 80027d2:	2301      	movne	r3, #1
 80027d4:	2300      	moveq	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f47f af6d 	bne.w	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f4:	e034      	b.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f886 	bl	8002908 <I2C_IsAcknowledgeFailed>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e034      	b.n	8002870 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d028      	beq.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7ff f811 	bl	8001834 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11d      	bne.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b80      	cmp	r3, #128	@ 0x80
 8002830:	d016      	beq.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e007      	b.n	8002870 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286a:	2b80      	cmp	r3, #128	@ 0x80
 800286c:	d1c3      	bne.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002884:	e034      	b.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f83e 	bl	8002908 <I2C_IsAcknowledgeFailed>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e034      	b.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d028      	beq.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe ffc9 	bl	8001834 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11d      	bne.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d016      	beq.n	80028f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e007      	b.n	8002900 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d1c3      	bne.n	8002886 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291e:	d11b      	bne.n	8002958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f043 0204 	orr.w	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0cc      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b68      	ldr	r3, [pc, #416]	@ (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d90c      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b63      	ldr	r3, [pc, #396]	@ (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0b8      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029bc:	4b59      	ldr	r3, [pc, #356]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d4:	4b53      	ldr	r3, [pc, #332]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a52      	ldr	r2, [pc, #328]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b50      	ldr	r3, [pc, #320]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	494d      	ldr	r1, [pc, #308]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d044      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d119      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e07f      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b3f      	ldr	r3, [pc, #252]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e06f      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e067      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4934      	ldr	r1, [pc, #208]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a58:	f7fe feec 	bl	8001834 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a60:	f7fe fee8 	bl	8001834 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e04f      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 020c 	and.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1eb      	bne.n	8002a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a88:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d20c      	bcs.n	8002ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e032      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4916      	ldr	r1, [pc, #88]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	490e      	ldr	r1, [pc, #56]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aee:	f000 f887 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	490a      	ldr	r1, [pc, #40]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	5ccb      	ldrb	r3, [r1, r3]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	4a09      	ldr	r2, [pc, #36]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fd7c 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023c00 	.word	0x40023c00
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08007d6c 	.word	0x08007d6c
 8002b2c:	20000008 	.word	0x20000008
 8002b30:	2000000c 	.word	0x2000000c

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000008 	.word	0x20000008

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b50:	f7ff fff0 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0a9b      	lsrs	r3, r3, #10
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08007d7c 	.word	0x08007d7c

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b78:	f7ff ffdc 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0b5b      	lsrs	r3, r3, #13
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	08007d7c 	.word	0x08007d7c

08002b9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	220f      	movs	r2, #15
 8002baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bde:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_RCC_GetClockConfig+0x60>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 020f 	and.w	r2, r3, #15
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c04:	b0ae      	sub	sp, #184	@ 0xb8
 8002c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c26:	4bcb      	ldr	r3, [pc, #812]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	f200 8206 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x440>
 8002c34:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c71 	.word	0x08002c71
 8002c40:	08003041 	.word	0x08003041
 8002c44:	08003041 	.word	0x08003041
 8002c48:	08003041 	.word	0x08003041
 8002c4c:	08002c79 	.word	0x08002c79
 8002c50:	08003041 	.word	0x08003041
 8002c54:	08003041 	.word	0x08003041
 8002c58:	08003041 	.word	0x08003041
 8002c5c:	08002c81 	.word	0x08002c81
 8002c60:	08003041 	.word	0x08003041
 8002c64:	08003041 	.word	0x08003041
 8002c68:	08003041 	.word	0x08003041
 8002c6c:	08002e71 	.word	0x08002e71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4bb9      	ldr	r3, [pc, #740]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002c76:	e1e7      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c78:	4bb8      	ldr	r3, [pc, #736]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c7e:	e1e3      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c80:	4bb4      	ldr	r3, [pc, #720]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8c:	4bb1      	ldr	r3, [pc, #708]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d071      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c98:	4bae      	ldr	r3, [pc, #696]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ca4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	1a51      	subs	r1, r2, r1
 8002cda:	6439      	str	r1, [r7, #64]	@ 0x40
 8002cdc:	4629      	mov	r1, r5
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfa:	4641      	mov	r1, r8
 8002cfc:	018a      	lsls	r2, r1, #6
 8002cfe:	4641      	mov	r1, r8
 8002d00:	1a51      	subs	r1, r2, r1
 8002d02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d04:	4649      	mov	r1, r9
 8002d06:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d18:	4649      	mov	r1, r9
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4641      	mov	r1, r8
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d32:	462b      	mov	r3, r5
 8002d34:	460a      	mov	r2, r1
 8002d36:	eb42 0303 	adc.w	r3, r2, r3
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d48:	4629      	mov	r1, r5
 8002d4a:	024b      	lsls	r3, r1, #9
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d52:	4621      	mov	r1, r4
 8002d54:	024a      	lsls	r2, r1, #9
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d6c:	f7fd fa58 	bl	8000220 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d7a:	e067      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b75      	ldr	r3, [pc, #468]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d88:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d96:	2300      	movs	r3, #0
 8002d98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	0159      	lsls	r1, r3, #5
 8002dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db0:	0150      	lsls	r0, r2, #5
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4621      	mov	r1, r4
 8002db8:	1a51      	subs	r1, r2, r1
 8002dba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	018b      	lsls	r3, r1, #6
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dda:	4641      	mov	r1, r8
 8002ddc:	018a      	lsls	r2, r1, #6
 8002dde:	4641      	mov	r1, r8
 8002de0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de4:	4649      	mov	r1, r9
 8002de6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002df6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dfe:	4692      	mov	sl, r2
 8002e00:	469b      	mov	fp, r3
 8002e02:	4623      	mov	r3, r4
 8002e04:	eb1a 0303 	adds.w	r3, sl, r3
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e1e:	4629      	mov	r1, r5
 8002e20:	028b      	lsls	r3, r1, #10
 8002e22:	4621      	mov	r1, r4
 8002e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e28:	4621      	mov	r1, r4
 8002e2a:	028a      	lsls	r2, r1, #10
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e34:	2200      	movs	r2, #0
 8002e36:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e38:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e3e:	f7fd f9ef 	bl	8000220 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4613      	mov	r3, r2
 8002e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e4c:	4b41      	ldr	r3, [pc, #260]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	3301      	adds	r3, #1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e6e:	e0eb      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d06b      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e88:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	2200      	movs	r2, #0
 8002e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ea0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	0159      	lsls	r1, r3, #5
 8002eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb6:	0150      	lsls	r0, r2, #5
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	1a51      	subs	r1, r2, r1
 8002ec0:	61b9      	str	r1, [r7, #24]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	018b      	lsls	r3, r1, #6
 8002eda:	4651      	mov	r1, sl
 8002edc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	018a      	lsls	r2, r1, #6
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ebb2 0801 	subs.w	r8, r2, r1
 8002eea:	4659      	mov	r1, fp
 8002eec:	eb63 0901 	sbc.w	r9, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f04:	4690      	mov	r8, r2
 8002f06:	4699      	mov	r9, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	eb18 0303 	adds.w	r3, r8, r3
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	462b      	mov	r3, r5
 8002f12:	eb49 0303 	adc.w	r3, r9, r3
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f24:	4629      	mov	r1, r5
 8002f26:	024b      	lsls	r3, r1, #9
 8002f28:	4621      	mov	r1, r4
 8002f2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2e:	4621      	mov	r1, r4
 8002f30:	024a      	lsls	r2, r1, #9
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f44:	f7fd f96c 	bl	8000220 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f52:	e065      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x420>
 8002f54:	40023800 	.word	0x40023800
 8002f58:	00f42400 	.word	0x00f42400
 8002f5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f60:	4b3d      	ldr	r3, [pc, #244]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	2200      	movs	r2, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f70:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f72:	2300      	movs	r3, #0
 8002f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	f04f 0000 	mov.w	r0, #0
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8c:	0150      	lsls	r0, r2, #5
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4641      	mov	r1, r8
 8002f94:	1a51      	subs	r1, r2, r1
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	4649      	mov	r1, r9
 8002f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fac:	4659      	mov	r1, fp
 8002fae:	018b      	lsls	r3, r1, #6
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	018a      	lsls	r2, r1, #6
 8002fba:	4651      	mov	r1, sl
 8002fbc:	1a54      	subs	r4, r2, r1
 8002fbe:	4659      	mov	r1, fp
 8002fc0:	eb63 0501 	sbc.w	r5, r3, r1
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	00eb      	lsls	r3, r5, #3
 8002fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd2:	00e2      	lsls	r2, r4, #3
 8002fd4:	4614      	mov	r4, r2
 8002fd6:	461d      	mov	r5, r3
 8002fd8:	4643      	mov	r3, r8
 8002fda:	18e3      	adds	r3, r4, r3
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	464b      	mov	r3, r9
 8002fe0:	eb45 0303 	adc.w	r3, r5, r3
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	028b      	lsls	r3, r1, #10
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	028a      	lsls	r2, r1, #10
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003008:	2200      	movs	r2, #0
 800300a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800300c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800300e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003012:	f7fd f905 	bl	8000220 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4613      	mov	r3, r2
 800301c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003020:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x458>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0f1b      	lsrs	r3, r3, #28
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800302e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800303e:	e003      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003046:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800304c:	4618      	mov	r0, r3
 800304e:	37b8      	adds	r7, #184	@ 0xb8
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	00f42400 	.word	0x00f42400

08003060 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e28d      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8083 	beq.w	8003186 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003080:	4b94      	ldr	r3, [pc, #592]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b04      	cmp	r3, #4
 800308a:	d019      	beq.n	80030c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800308c:	4b91      	ldr	r3, [pc, #580]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003094:	2b08      	cmp	r3, #8
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003098:	4b8e      	ldr	r3, [pc, #568]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030a4:	d00c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b8b      	ldr	r3, [pc, #556]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d112      	bne.n	80030d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b88      	ldr	r3, [pc, #544]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030be:	d10b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	4b84      	ldr	r3, [pc, #528]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05b      	beq.n	8003184 <HAL_RCC_OscConfig+0x124>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d157      	bne.n	8003184 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e25a      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e0:	d106      	bne.n	80030f0 <HAL_RCC_OscConfig+0x90>
 80030e2:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7b      	ldr	r2, [pc, #492]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0xcc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0xb4>
 80030fa:	4b76      	ldr	r3, [pc, #472]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a75      	ldr	r2, [pc, #468]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b73      	ldr	r3, [pc, #460]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a72      	ldr	r2, [pc, #456]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0xcc>
 8003114:	4b6f      	ldr	r3, [pc, #444]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6e      	ldr	r2, [pc, #440]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b6c      	ldr	r3, [pc, #432]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a6b      	ldr	r2, [pc, #428]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fb7e 	bl	8001834 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fb7a 	bl	8001834 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	@ 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e21f      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b61      	ldr	r3, [pc, #388]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0xdc>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fb6a 	bl	8001834 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe fb66 	bl	8001834 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	@ 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e20b      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b57      	ldr	r3, [pc, #348]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x104>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d06f      	beq.n	8003272 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003192:	4b50      	ldr	r3, [pc, #320]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319e:	4b4d      	ldr	r3, [pc, #308]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031aa:	4b4a      	ldr	r3, [pc, #296]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b44      	ldr	r3, [pc, #272]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x186>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1d3      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4937      	ldr	r1, [pc, #220]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e03a      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <HAL_RCC_OscConfig+0x278>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe fb13 	bl	8001834 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003212:	f7fe fb0f 	bl	8001834 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1b4      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	4b2b      	ldr	r3, [pc, #172]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4925      	ldr	r1, [pc, #148]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003246:	4b24      	ldr	r3, [pc, #144]	@ (80032d8 <HAL_RCC_OscConfig+0x278>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe faf2 	bl	8001834 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003254:	f7fe faee 	bl	8001834 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e193      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	4b1b      	ldr	r3, [pc, #108]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d036      	beq.n	80032ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_RCC_OscConfig+0x27c>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe fad2 	bl	8001834 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe face 	bl	8001834 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e173      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_OscConfig+0x274>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x234>
 80032b2:	e01b      	b.n	80032ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b4:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_OscConfig+0x27c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fabb 	bl	8001834 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	e00e      	b.n	80032e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c2:	f7fe fab7 	bl	8001834 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d907      	bls.n	80032e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e15c      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	42470000 	.word	0x42470000
 80032dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b8a      	ldr	r3, [pc, #552]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ea      	bne.n	80032c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8097 	beq.w	8003428 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b83      	ldr	r3, [pc, #524]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b7f      	ldr	r3, [pc, #508]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	4a7e      	ldr	r2, [pc, #504]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	@ 0x40
 800331a:	4b7c      	ldr	r3, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b79      	ldr	r3, [pc, #484]	@ (8003510 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b76      	ldr	r3, [pc, #472]	@ (8003510 <HAL_RCC_OscConfig+0x4b0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a75      	ldr	r2, [pc, #468]	@ (8003510 <HAL_RCC_OscConfig+0x4b0>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fe fa77 	bl	8001834 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fe fa73 	bl	8001834 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e118      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b6c      	ldr	r3, [pc, #432]	@ (8003510 <HAL_RCC_OscConfig+0x4b0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x31e>
 8003370:	4b66      	ldr	r3, [pc, #408]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003374:	4a65      	ldr	r2, [pc, #404]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x358>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x340>
 8003386:	4b61      	ldr	r3, [pc, #388]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a60      	ldr	r2, [pc, #384]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	4b5e      	ldr	r3, [pc, #376]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a5d      	ldr	r2, [pc, #372]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x358>
 80033a0:	4b5a      	ldr	r3, [pc, #360]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a59      	ldr	r2, [pc, #356]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	4b57      	ldr	r3, [pc, #348]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b0:	4a56      	ldr	r2, [pc, #344]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fe fa38 	bl	8001834 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe fa34 	bl	8001834 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0d7      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ee      	beq.n	80033c8 <HAL_RCC_OscConfig+0x368>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fe fa22 	bl	8001834 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fe fa1e 	bl	8001834 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0c1      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	4b40      	ldr	r3, [pc, #256]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341c:	4b3b      	ldr	r3, [pc, #236]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	4a3a      	ldr	r2, [pc, #232]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003426:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80ad 	beq.w	800358c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003432:	4b36      	ldr	r3, [pc, #216]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b08      	cmp	r3, #8
 800343c:	d060      	beq.n	8003500 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d145      	bne.n	80034d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <HAL_RCC_OscConfig+0x4b4>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe f9f2 	bl	8001834 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe f9ee 	bl	8001834 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e093      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b29      	ldr	r3, [pc, #164]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	491b      	ldr	r1, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x4b4>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe f9c3 	bl	8001834 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe f9bf 	bl	8001834 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e064      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x452>
 80034d0:	e05c      	b.n	800358c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_RCC_OscConfig+0x4b4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe f9ac 	bl	8001834 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe f9a8 	bl	8001834 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e04d      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x480>
 80034fe:	e045      	b.n	800358c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e040      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1f      	ldr	r3, [pc, #124]	@ (8003598 <HAL_RCC_OscConfig+0x538>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d030      	beq.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d129      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d122      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d119      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d10f      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e041      	b.n	8003632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f839 	bl	800363a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 f9c0 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d001      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e04e      	b.n	8003706 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a23      	ldr	r2, [pc, #140]	@ (8003714 <HAL_TIM_Base_Start_IT+0xc4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d022      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003692:	d01d      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_TIM_Base_Start_IT+0xc8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d018      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	@ (800371c <HAL_TIM_Base_Start_IT+0xcc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d013      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003720 <HAL_TIM_Base_Start_IT+0xd0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00e      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003724 <HAL_TIM_Base_Start_IT+0xd4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d009      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a19      	ldr	r2, [pc, #100]	@ (8003728 <HAL_TIM_Base_Start_IT+0xd8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x80>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a18      	ldr	r2, [pc, #96]	@ (800372c <HAL_TIM_Base_Start_IT+0xdc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d111      	bne.n	80036f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d010      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	e007      	b.n	8003704 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40010400 	.word	0x40010400
 8003728:	40014000 	.word	0x40014000
 800372c:	40001800 	.word	0x40001800

08003730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d020      	beq.n	8003794 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0202 	mvn.w	r2, #2
 8003764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8d2 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8c4 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8d5 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0204 	mvn.w	r2, #4
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8ac 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f89e 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f8af 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0208 	mvn.w	r2, #8
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2204      	movs	r2, #4
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f886 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f878 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f889 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0210 	mvn.w	r2, #16
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2208      	movs	r2, #8
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f860 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f852 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f863 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0201 	mvn.w	r2, #1
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fb1e 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f906 	bl	8003acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f834 	bl	800394c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0220 	mvn.w	r2, #32
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8d8 	bl	8003ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a46      	ldr	r2, [pc, #280]	@ (8003a8c <TIM_Base_SetConfig+0x12c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a43      	ldr	r2, [pc, #268]	@ (8003a90 <TIM_Base_SetConfig+0x130>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a42      	ldr	r2, [pc, #264]	@ (8003a94 <TIM_Base_SetConfig+0x134>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a41      	ldr	r2, [pc, #260]	@ (8003a98 <TIM_Base_SetConfig+0x138>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a40      	ldr	r2, [pc, #256]	@ (8003a9c <TIM_Base_SetConfig+0x13c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a35      	ldr	r2, [pc, #212]	@ (8003a8c <TIM_Base_SetConfig+0x12c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c0:	d027      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a32      	ldr	r2, [pc, #200]	@ (8003a90 <TIM_Base_SetConfig+0x130>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d023      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a31      	ldr	r2, [pc, #196]	@ (8003a94 <TIM_Base_SetConfig+0x134>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a30      	ldr	r2, [pc, #192]	@ (8003a98 <TIM_Base_SetConfig+0x138>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2f      	ldr	r2, [pc, #188]	@ (8003a9c <TIM_Base_SetConfig+0x13c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa0 <TIM_Base_SetConfig+0x140>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <TIM_Base_SetConfig+0x144>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa8 <TIM_Base_SetConfig+0x148>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	@ (8003aac <TIM_Base_SetConfig+0x14c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab0 <TIM_Base_SetConfig+0x150>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a29      	ldr	r2, [pc, #164]	@ (8003ab4 <TIM_Base_SetConfig+0x154>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <TIM_Base_SetConfig+0x12c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a12      	ldr	r2, [pc, #72]	@ (8003a9c <TIM_Base_SetConfig+0x13c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800
 8003aac:	40001800 	.word	0x40001800
 8003ab0:	40001c00 	.word	0x40001c00
 8003ab4:	40002000 	.word	0x40002000

08003ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e042      	b.n	8003b78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fd38 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	@ 0x24
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f973 	bl	8003e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	@ 0x28
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d175      	bne.n	8003c8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Transmit+0x2c>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e06e      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	@ 0x21
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fe39 	bl	8001834 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd8:	d108      	bne.n	8003bec <HAL_UART_Transmit+0x6c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e003      	b.n	8003bf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bf4:	e02e      	b.n	8003c54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2180      	movs	r1, #128	@ 0x80
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f848 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e03a      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3302      	adds	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e007      	b.n	8003c46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	3301      	adds	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1cb      	bne.n	8003bf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2140      	movs	r1, #64	@ 0x40
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f814 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e006      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	e03b      	b.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d037      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fd fdc0 	bl	8001834 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e03a      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d023      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b80      	cmp	r3, #128	@ 0x80
 8003cdc:	d020      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d01d      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d116      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f81d 	bl	8003d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2208      	movs	r2, #8
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e00f      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d0b4      	beq.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b095      	sub	sp, #84	@ 0x54
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d70:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d119      	bne.n	8003df4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f023 0310 	bic.w	r3, r3, #16
 8003dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003de0:	61ba      	str	r2, [r7, #24]
 8003de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	613b      	str	r3, [r7, #16]
   return(result);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e02:	bf00      	nop
 8003e04:	3754      	adds	r7, #84	@ 0x54
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e14:	b0c0      	sub	sp, #256	@ 0x100
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	68d9      	ldr	r1, [r3, #12]
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	ea40 0301 	orr.w	r3, r0, r1
 8003e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e68:	f021 010c 	bic.w	r1, r1, #12
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e76:	430b      	orrs	r3, r1
 8003e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	6999      	ldr	r1, [r3, #24]
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	ea40 0301 	orr.w	r3, r0, r1
 8003e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b8f      	ldr	r3, [pc, #572]	@ (80040dc <UART_SetConfig+0x2cc>)
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d005      	beq.n	8003eb0 <UART_SetConfig+0xa0>
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80040e0 <UART_SetConfig+0x2d0>)
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d104      	bne.n	8003eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7fe fe60 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003eb8:	e003      	b.n	8003ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eba:	f7fe fe47 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8003ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ecc:	f040 810c 	bne.w	80040e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eea:	415b      	adcs	r3, r3
 8003eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	eb12 0801 	adds.w	r8, r2, r1
 8003ef8:	4629      	mov	r1, r5
 8003efa:	eb43 0901 	adc.w	r9, r3, r1
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f12:	4690      	mov	r8, r2
 8003f14:	4699      	mov	r9, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	eb18 0303 	adds.w	r3, r8, r3
 8003f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f20:	462b      	mov	r3, r5
 8003f22:	eb49 0303 	adc.w	r3, r9, r3
 8003f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f3e:	460b      	mov	r3, r1
 8003f40:	18db      	adds	r3, r3, r3
 8003f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f44:	4613      	mov	r3, r2
 8003f46:	eb42 0303 	adc.w	r3, r2, r3
 8003f4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f54:	f7fc f964 	bl	8000220 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4b61      	ldr	r3, [pc, #388]	@ (80040e4 <UART_SetConfig+0x2d4>)
 8003f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	011c      	lsls	r4, r3, #4
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f80:	415b      	adcs	r3, r3
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f88:	4641      	mov	r1, r8
 8003f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f8e:	4649      	mov	r1, r9
 8003f90:	eb43 0b01 	adc.w	fp, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa8:	4692      	mov	sl, r2
 8003faa:	469b      	mov	fp, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	eb1a 0303 	adds.w	r3, sl, r3
 8003fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	18db      	adds	r3, r3, r3
 8003fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fda:	4613      	mov	r3, r2
 8003fdc:	eb42 0303 	adc.w	r3, r2, r3
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fea:	f7fc f919 	bl	8000220 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <UART_SetConfig+0x2d4>)
 8003ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2264      	movs	r2, #100	@ 0x64
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	1acb      	subs	r3, r1, r3
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800400a:	4b36      	ldr	r3, [pc, #216]	@ (80040e4 <UART_SetConfig+0x2d4>)
 800400c:	fba3 2302 	umull	r2, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004018:	441c      	add	r4, r3
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004024:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	1891      	adds	r1, r2, r2
 8004032:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004034:	415b      	adcs	r3, r3
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800403c:	4641      	mov	r1, r8
 800403e:	1851      	adds	r1, r2, r1
 8004040:	6339      	str	r1, [r7, #48]	@ 0x30
 8004042:	4649      	mov	r1, r9
 8004044:	414b      	adcs	r3, r1
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004054:	4659      	mov	r1, fp
 8004056:	00cb      	lsls	r3, r1, #3
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405e:	4651      	mov	r1, sl
 8004060:	00ca      	lsls	r2, r1, #3
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	4603      	mov	r3, r0
 8004068:	4642      	mov	r2, r8
 800406a:	189b      	adds	r3, r3, r2
 800406c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004070:	464b      	mov	r3, r9
 8004072:	460a      	mov	r2, r1
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004088:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800408c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004090:	460b      	mov	r3, r1
 8004092:	18db      	adds	r3, r3, r3
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004096:	4613      	mov	r3, r2
 8004098:	eb42 0303 	adc.w	r3, r2, r3
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040a6:	f7fc f8bb 	bl	8000220 <__aeabi_uldivmod>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <UART_SetConfig+0x2d4>)
 80040b0:	fba3 1302 	umull	r1, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	2164      	movs	r1, #100	@ 0x64
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	3332      	adds	r3, #50	@ 0x32
 80040c2:	4a08      	ldr	r2, [pc, #32]	@ (80040e4 <UART_SetConfig+0x2d4>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f003 0207 	and.w	r2, r3, #7
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4422      	add	r2, r4
 80040d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d8:	e106      	b.n	80042e8 <UART_SetConfig+0x4d8>
 80040da:	bf00      	nop
 80040dc:	40011000 	.word	0x40011000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040fa:	4642      	mov	r2, r8
 80040fc:	464b      	mov	r3, r9
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	6239      	str	r1, [r7, #32]
 8004102:	415b      	adcs	r3, r3
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
 8004106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800410a:	4641      	mov	r1, r8
 800410c:	1854      	adds	r4, r2, r1
 800410e:	4649      	mov	r1, r9
 8004110:	eb43 0501 	adc.w	r5, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	00eb      	lsls	r3, r5, #3
 800411e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004122:	00e2      	lsls	r2, r4, #3
 8004124:	4614      	mov	r4, r2
 8004126:	461d      	mov	r5, r3
 8004128:	4643      	mov	r3, r8
 800412a:	18e3      	adds	r3, r4, r3
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004130:	464b      	mov	r3, r9
 8004132:	eb45 0303 	adc.w	r3, r5, r3
 8004136:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004156:	4629      	mov	r1, r5
 8004158:	008b      	lsls	r3, r1, #2
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004160:	4621      	mov	r1, r4
 8004162:	008a      	lsls	r2, r1, #2
 8004164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004168:	f7fc f85a 	bl	8000220 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4b60      	ldr	r3, [pc, #384]	@ (80042f4 <UART_SetConfig+0x4e4>)
 8004172:	fba3 2302 	umull	r2, r3, r3, r2
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	011c      	lsls	r4, r3, #4
 800417a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004184:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	61b9      	str	r1, [r7, #24]
 8004194:	415b      	adcs	r3, r3
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800419c:	4641      	mov	r1, r8
 800419e:	1851      	adds	r1, r2, r1
 80041a0:	6139      	str	r1, [r7, #16]
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b4:	4659      	mov	r1, fp
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4651      	mov	r1, sl
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4642      	mov	r2, r8
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041d0:	464b      	mov	r3, r9
 80041d2:	460a      	mov	r2, r1
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041f4:	4649      	mov	r1, r9
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	4641      	mov	r1, r8
 80041fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fe:	4641      	mov	r1, r8
 8004200:	008a      	lsls	r2, r1, #2
 8004202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004206:	f7fc f80b 	bl	8000220 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4611      	mov	r1, r2
 8004210:	4b38      	ldr	r3, [pc, #224]	@ (80042f4 <UART_SetConfig+0x4e4>)
 8004212:	fba3 2301 	umull	r2, r3, r3, r1
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2264      	movs	r2, #100	@ 0x64
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	1acb      	subs	r3, r1, r3
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	3332      	adds	r3, #50	@ 0x32
 8004224:	4a33      	ldr	r2, [pc, #204]	@ (80042f4 <UART_SetConfig+0x4e4>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004230:	441c      	add	r4, r3
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004236:	2200      	movs	r2, #0
 8004238:	673b      	str	r3, [r7, #112]	@ 0x70
 800423a:	677a      	str	r2, [r7, #116]	@ 0x74
 800423c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	415b      	adcs	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004250:	4641      	mov	r1, r8
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	4649      	mov	r1, r9
 8004258:	414b      	adcs	r3, r1
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004268:	4659      	mov	r1, fp
 800426a:	00cb      	lsls	r3, r1, #3
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004272:	4651      	mov	r1, sl
 8004274:	00ca      	lsls	r2, r1, #3
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4603      	mov	r3, r0
 800427c:	4642      	mov	r2, r8
 800427e:	189b      	adds	r3, r3, r2
 8004280:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004282:	464b      	mov	r3, r9
 8004284:	460a      	mov	r2, r1
 8004286:	eb42 0303 	adc.w	r3, r2, r3
 800428a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	663b      	str	r3, [r7, #96]	@ 0x60
 8004296:	667a      	str	r2, [r7, #100]	@ 0x64
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042a4:	4649      	mov	r1, r9
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	4641      	mov	r1, r8
 80042aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ae:	4641      	mov	r1, r8
 80042b0:	008a      	lsls	r2, r1, #2
 80042b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042b6:	f7fb ffb3 	bl	8000220 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <UART_SetConfig+0x4e4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	@ 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	@ 0x32
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <UART_SetConfig+0x4e4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4422      	add	r2, r4
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f4:	51eb851f 	.word	0x51eb851f

080042f8 <__NVIC_SetPriority>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db0a      	blt.n	8004322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	490c      	ldr	r1, [pc, #48]	@ (8004344 <__NVIC_SetPriority+0x4c>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	440b      	add	r3, r1
 800431c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004320:	e00a      	b.n	8004338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4908      	ldr	r1, [pc, #32]	@ (8004348 <__NVIC_SetPriority+0x50>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	3b04      	subs	r3, #4
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	440b      	add	r3, r1
 8004336:	761a      	strb	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <SysTick_Handler+0x1c>)
 8004352:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004354:	f001 fd18 	bl	8005d88 <xTaskGetSchedulerState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d001      	beq.n	8004362 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800435e:	f002 fb13 	bl	8006988 <xPortSysTickHandler>
  }
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000e010 	.word	0xe000e010

0800436c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004370:	2100      	movs	r1, #0
 8004372:	f06f 0004 	mvn.w	r0, #4
 8004376:	f7ff ffbf 	bl	80042f8 <__NVIC_SetPriority>
#endif
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004386:	f3ef 8305 	mrs	r3, IPSR
 800438a:	603b      	str	r3, [r7, #0]
  return(result);
 800438c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004392:	f06f 0305 	mvn.w	r3, #5
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	e00c      	b.n	80043b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800439a:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <osKernelInitialize+0x44>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043a2:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <osKernelInitialize+0x44>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	e002      	b.n	80043b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043b4:	687b      	ldr	r3, [r7, #4]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000540 	.word	0x20000540

080043c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ce:	f3ef 8305 	mrs	r3, IPSR
 80043d2:	603b      	str	r3, [r7, #0]
  return(result);
 80043d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043da:	f06f 0305 	mvn.w	r3, #5
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	e010      	b.n	8004404 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <osKernelStart+0x48>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d109      	bne.n	80043fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043ea:	f7ff ffbf 	bl	800436c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043ee:	4b08      	ldr	r3, [pc, #32]	@ (8004410 <osKernelStart+0x48>)
 80043f0:	2202      	movs	r2, #2
 80043f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043f4:	f001 f87a 	bl	80054ec <vTaskStartScheduler>
      stat = osOK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	e002      	b.n	8004404 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004404:	687b      	ldr	r3, [r7, #4]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000540 	.word	0x20000540

08004414 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	@ 0x38
 8004418:	af04      	add	r7, sp, #16
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004424:	f3ef 8305 	mrs	r3, IPSR
 8004428:	617b      	str	r3, [r7, #20]
  return(result);
 800442a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800442c:	2b00      	cmp	r3, #0
 800442e:	d17e      	bne.n	800452e <osThreadNew+0x11a>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d07b      	beq.n	800452e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800443a:	2318      	movs	r3, #24
 800443c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d045      	beq.n	80044da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <osThreadNew+0x48>
        name = attr->name;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <osThreadNew+0x6e>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b38      	cmp	r3, #56	@ 0x38
 8004474:	d805      	bhi.n	8004482 <osThreadNew+0x6e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <osThreadNew+0x72>
        return (NULL);
 8004482:	2300      	movs	r3, #0
 8004484:	e054      	b.n	8004530 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <osThreadNew+0xa8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80044a4:	d90a      	bls.n	80044bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <osThreadNew+0xa8>
        mem = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e010      	b.n	80044de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10c      	bne.n	80044de <osThreadNew+0xca>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <osThreadNew+0xca>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <osThreadNew+0xca>
          mem = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e001      	b.n	80044de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d110      	bne.n	8004506 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044ec:	9202      	str	r2, [sp, #8]
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6a3a      	ldr	r2, [r7, #32]
 80044f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fe1a 	bl	8005134 <xTaskCreateStatic>
 8004500:	4603      	mov	r3, r0
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e013      	b.n	800452e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d110      	bne.n	800452e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	b29a      	uxth	r2, r3
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fe68 	bl	80051f4 <xTaskCreate>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <osThreadNew+0x11a>
            hTask = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800452e:	693b      	ldr	r3, [r7, #16]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	@ 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004540:	f3ef 8305 	mrs	r3, IPSR
 8004544:	60bb      	str	r3, [r7, #8]
  return(result);
 8004546:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <osDelay+0x1c>
    stat = osErrorISR;
 800454c:	f06f 0305 	mvn.w	r3, #5
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e007      	b.n	8004564 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <osDelay+0x2c>
      vTaskDelay(ticks);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 ff8e 	bl	8005480 <vTaskDelay>
    }
  }

  return (stat);
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a07      	ldr	r2, [pc, #28]	@ (800459c <vApplicationGetIdleTaskMemory+0x2c>)
 8004580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4a06      	ldr	r2, [pc, #24]	@ (80045a0 <vApplicationGetIdleTaskMemory+0x30>)
 8004586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2280      	movs	r2, #128	@ 0x80
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000544 	.word	0x20000544
 80045a0:	200005a0 	.word	0x200005a0

080045a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a07      	ldr	r2, [pc, #28]	@ (80045d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80045b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4a06      	ldr	r2, [pc, #24]	@ (80045d4 <vApplicationGetTimerTaskMemory+0x30>)
 80045ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	200007a0 	.word	0x200007a0
 80045d4:	200007fc 	.word	0x200007fc

080045d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f103 0208 	add.w	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f103 0208 	add.w	r2, r3, #8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f103 0208 	add.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d103      	bne.n	800469a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e00c      	b.n	80046b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3308      	adds	r3, #8
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e002      	b.n	80046a8 <vListInsert+0x2e>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d2f6      	bcs.n	80046a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6852      	ldr	r2, [r2, #4]
 800470c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d103      	bne.n	8004720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	1e5a      	subs	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800476c:	f002 f87c 	bl	8006868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004778:	68f9      	ldr	r1, [r7, #12]
 800477a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	441a      	add	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479c:	3b01      	subs	r3, #1
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	441a      	add	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	22ff      	movs	r2, #255	@ 0xff
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	@ 0xff
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d114      	bne.n	80047ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01a      	beq.n	8004800 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3310      	adds	r3, #16
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f91a 	bl	8005a08 <xTaskRemoveFromEventList>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d012      	beq.n	8004800 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <xQueueGenericReset+0xd0>)
 80047dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	e009      	b.n	8004800 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3310      	adds	r3, #16
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fef1 	bl	80045d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3324      	adds	r3, #36	@ 0x24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff feec 	bl	80045d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004800:	f002 f864 	bl	80068cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004804:	2301      	movs	r3, #1
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	@ 0x38
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	e7fd      	b.n	800485a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <xQueueGenericCreateStatic+0x56>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <xQueueGenericCreateStatic+0x5a>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericCreateStatic+0x5c>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <xQueueGenericCreateStatic+0x84>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <xQueueGenericCreateStatic+0x88>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <xQueueGenericCreateStatic+0x8a>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fb      	str	r3, [r7, #28]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048ba:	2350      	movs	r3, #80	@ 0x50
 80048bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b50      	cmp	r3, #80	@ 0x50
 80048c2:	d00b      	beq.n	80048dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61bb      	str	r3, [r7, #24]
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80048e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80048f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f805 	bl	800490e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004906:	4618      	mov	r0, r3
 8004908:	3730      	adds	r7, #48	@ 0x30
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e002      	b.n	8004930 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800493c:	2101      	movs	r1, #1
 800493e:	69b8      	ldr	r0, [r7, #24]
 8004940:	f7ff fefe 	bl	8004740 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	@ 0x38
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004962:	2300      	movs	r3, #0
 8004964:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <xQueueGenericSend+0x34>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <xQueueGenericSend+0x42>
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <xQueueGenericSend+0x46>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <xQueueGenericSend+0x48>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <xQueueGenericSend+0x64>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d103      	bne.n	80049c6 <xQueueGenericSend+0x72>
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <xQueueGenericSend+0x76>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xQueueGenericSend+0x78>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <xQueueGenericSend+0x94>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	623b      	str	r3, [r7, #32]
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049e8:	f001 f9ce 	bl	8005d88 <xTaskGetSchedulerState>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <xQueueGenericSend+0xa4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <xQueueGenericSend+0xa8>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <xQueueGenericSend+0xaa>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <xQueueGenericSend+0xc6>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	61fb      	str	r3, [r7, #28]
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a1a:	f001 ff25 	bl	8006868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <xQueueGenericSend+0xdc>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d129      	bne.n	8004a84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a36:	f000 fa0f 	bl	8004e58 <prvCopyDataToQueue>
 8004a3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	3324      	adds	r3, #36	@ 0x24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 ffdd 	bl	8005a08 <xTaskRemoveFromEventList>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a54:	4b3f      	ldr	r3, [pc, #252]	@ (8004b54 <xQueueGenericSend+0x200>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	e00a      	b.n	8004a7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a6c:	4b39      	ldr	r3, [pc, #228]	@ (8004b54 <xQueueGenericSend+0x200>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a7c:	f001 ff26 	bl	80068cc <vPortExitCritical>
				return pdPASS;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e063      	b.n	8004b4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a8a:	f001 ff1f 	bl	80068cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e05c      	b.n	8004b4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f817 	bl	8005ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aa6:	f001 ff11 	bl	80068cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aaa:	f000 fd87 	bl	80055bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aae:	f001 fedb 	bl	8006868 <vPortEnterCritical>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d103      	bne.n	8004ac8 <xQueueGenericSend+0x174>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d103      	bne.n	8004ade <xQueueGenericSend+0x18a>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ade:	f001 fef5 	bl	80068cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ae2:	1d3a      	adds	r2, r7, #4
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f806 	bl	8005afc <xTaskCheckForTimeOut>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d124      	bne.n	8004b40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004af6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004af8:	f000 faa6 	bl	8005048 <prvIsQueueFull>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	3310      	adds	r3, #16
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 ff2a 	bl	8005964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b12:	f000 fa31 	bl	8004f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b16:	f000 fd5f 	bl	80055d8 <xTaskResumeAll>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f47f af7c 	bne.w	8004a1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b22:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <xQueueGenericSend+0x200>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	e772      	b.n	8004a1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b36:	f000 fa1f 	bl	8004f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b3a:	f000 fd4d 	bl	80055d8 <xTaskResumeAll>
 8004b3e:	e76c      	b.n	8004a1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b42:	f000 fa19 	bl	8004f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b46:	f000 fd47 	bl	80055d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3738      	adds	r7, #56	@ 0x38
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b090      	sub	sp, #64	@ 0x40
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <xQueueGenericSendFromISR+0x3e>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <xQueueGenericSendFromISR+0x42>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <xQueueGenericSendFromISR+0x44>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d103      	bne.n	8004bc6 <xQueueGenericSendFromISR+0x6e>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <xQueueGenericSendFromISR+0x72>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <xQueueGenericSendFromISR+0x74>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	623b      	str	r3, [r7, #32]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004be8:	f001 ff1e 	bl	8006a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bec:	f3ef 8211 	mrs	r2, BASEPRI
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	61fa      	str	r2, [r7, #28]
 8004c02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <xQueueGenericSendFromISR+0xc2>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d12f      	bne.n	8004c7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c30:	f000 f912 	bl	8004e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d112      	bne.n	8004c64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	3324      	adds	r3, #36	@ 0x24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fedc 	bl	8005a08 <xTaskRemoveFromEventList>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00e      	beq.n	8004c74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	b25a      	sxtb	r2, r3
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c74:	2301      	movs	r3, #1
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c78:	e001      	b.n	8004c7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3740      	adds	r7, #64	@ 0x40
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	@ 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <xQueueReceive+0x32>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	623b      	str	r3, [r7, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	e7fd      	b.n	8004cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <xQueueReceive+0x40>
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <xQueueReceive+0x44>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <xQueueReceive+0x46>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <xQueueReceive+0x62>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	61fb      	str	r3, [r7, #28]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cf6:	f001 f847 	bl	8005d88 <xTaskGetSchedulerState>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <xQueueReceive+0x72>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueReceive+0x76>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueReceive+0x78>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <xQueueReceive+0x94>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	61bb      	str	r3, [r7, #24]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d28:	f001 fd9e 	bl	8006868 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01f      	beq.n	8004d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d3c:	f000 f8f6 	bl	8004f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	1e5a      	subs	r2, r3, #1
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	3310      	adds	r3, #16
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fe57 	bl	8005a08 <xTaskRemoveFromEventList>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d60:	4b3c      	ldr	r3, [pc, #240]	@ (8004e54 <xQueueReceive+0x1c0>)
 8004d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d70:	f001 fdac 	bl	80068cc <vPortExitCritical>
				return pdPASS;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e069      	b.n	8004e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d7e:	f001 fda5 	bl	80068cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e062      	b.n	8004e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fe9d 	bl	8005ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d9a:	f001 fd97 	bl	80068cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d9e:	f000 fc0d 	bl	80055bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004da2:	f001 fd61 	bl	8006868 <vPortEnterCritical>
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d103      	bne.n	8004dbc <xQueueReceive+0x128>
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d103      	bne.n	8004dd2 <xQueueReceive+0x13e>
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dd2:	f001 fd7b 	bl	80068cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	f107 0310 	add.w	r3, r7, #16
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fe8c 	bl	8005afc <xTaskCheckForTimeOut>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d123      	bne.n	8004e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dec:	f000 f916 	bl	800501c <prvIsQueueEmpty>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d017      	beq.n	8004e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	3324      	adds	r3, #36	@ 0x24
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fdb0 	bl	8005964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e06:	f000 f8b7 	bl	8004f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e0a:	f000 fbe5 	bl	80055d8 <xTaskResumeAll>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d189      	bne.n	8004d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <xQueueReceive+0x1c0>)
 8004e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	e780      	b.n	8004d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e28:	f000 f8a6 	bl	8004f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e2c:	f000 fbd4 	bl	80055d8 <xTaskResumeAll>
 8004e30:	e77a      	b.n	8004d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e34:	f000 f8a0 	bl	8004f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e38:	f000 fbce 	bl	80055d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e3e:	f000 f8ed 	bl	800501c <prvIsQueueEmpty>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f43f af6f 	beq.w	8004d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3730      	adds	r7, #48	@ 0x30
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10d      	bne.n	8004e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d14d      	bne.n	8004f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 ff9e 	bl	8005dc4 <xTaskPriorityDisinherit>
 8004e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	e043      	b.n	8004f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d119      	bne.n	8004ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6858      	ldr	r0, [r3, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	f002 f81c 	bl	8006ee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	441a      	add	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d32b      	bcc.n	8004f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	e026      	b.n	8004f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68d8      	ldr	r0, [r3, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	f002 f802 	bl	8006ee0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	425b      	negs	r3, r3
 8004ee6:	441a      	add	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d207      	bcs.n	8004f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	425b      	negs	r3, r3
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d105      	bne.n	8004f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f22:	697b      	ldr	r3, [r7, #20]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	441a      	add	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d303      	bcc.n	8004f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68d9      	ldr	r1, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6838      	ldr	r0, [r7, #0]
 8004f6c:	f001 ffb8 	bl	8006ee0 <memcpy>
	}
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f80:	f001 fc72 	bl	8006868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f8c:	e011      	b.n	8004fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d012      	beq.n	8004fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3324      	adds	r3, #36	@ 0x24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fd34 	bl	8005a08 <xTaskRemoveFromEventList>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fa6:	f000 fe0d 	bl	8005bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	dce9      	bgt.n	8004f8e <prvUnlockQueue+0x16>
 8004fba:	e000      	b.n	8004fbe <prvUnlockQueue+0x46>
					break;
 8004fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	22ff      	movs	r2, #255	@ 0xff
 8004fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fc6:	f001 fc81 	bl	80068cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fca:	f001 fc4d 	bl	8006868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fd6:	e011      	b.n	8004ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d012      	beq.n	8005006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3310      	adds	r3, #16
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fd0f 	bl	8005a08 <xTaskRemoveFromEventList>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ff0:	f000 fde8 	bl	8005bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005000:	2b00      	cmp	r3, #0
 8005002:	dce9      	bgt.n	8004fd8 <prvUnlockQueue+0x60>
 8005004:	e000      	b.n	8005008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	22ff      	movs	r2, #255	@ 0xff
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005010:	f001 fc5c 	bl	80068cc <vPortExitCritical>
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005024:	f001 fc20 	bl	8006868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e001      	b.n	800503a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800503a:	f001 fc47 	bl	80068cc <vPortExitCritical>

	return xReturn;
 800503e:	68fb      	ldr	r3, [r7, #12]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005050:	f001 fc0a 	bl	8006868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	429a      	cmp	r2, r3
 800505e:	d102      	bne.n	8005066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e001      	b.n	800506a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800506a:	f001 fc2f 	bl	80068cc <vPortExitCritical>

	return xReturn;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e014      	b.n	80050b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005088:	4a0f      	ldr	r2, [pc, #60]	@ (80050c8 <vQueueAddToRegistry+0x50>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005094:	490c      	ldr	r1, [pc, #48]	@ (80050c8 <vQueueAddToRegistry+0x50>)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800509e:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <vQueueAddToRegistry+0x50>)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050aa:	e006      	b.n	80050ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b07      	cmp	r3, #7
 80050b6:	d9e7      	bls.n	8005088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000bfc 	.word	0x20000bfc

080050cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050dc:	f001 fbc4 	bl	8006868 <vPortEnterCritical>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d103      	bne.n	80050f6 <vQueueWaitForMessageRestricted+0x2a>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d103      	bne.n	800510c <vQueueWaitForMessageRestricted+0x40>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510c:	f001 fbde 	bl	80068cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3324      	adds	r3, #36	@ 0x24
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fc45 	bl	80059b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff ff26 	bl	8004f78 <prvUnlockQueue>
	}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	@ 0x38
 8005138:	af04      	add	r7, sp, #16
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	623b      	str	r3, [r7, #32]
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	e7fd      	b.n	800515c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	61fb      	str	r3, [r7, #28]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800517e:	235c      	movs	r3, #92	@ 0x5c
 8005180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b5c      	cmp	r3, #92	@ 0x5c
 8005186:	d00b      	beq.n	80051a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	61bb      	str	r3, [r7, #24]
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01e      	beq.n	80051e6 <xTaskCreateStatic+0xb2>
 80051a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01b      	beq.n	80051e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051c0:	2300      	movs	r3, #0
 80051c2:	9303      	str	r3, [sp, #12]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	9302      	str	r3, [sp, #8]
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f850 	bl	800527e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051e0:	f000 f8de 	bl	80053a0 <prvAddNewTaskToReadyList>
 80051e4:	e001      	b.n	80051ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051ea:	697b      	ldr	r3, [r7, #20]
	}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	@ 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	@ 0x30
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fc4f 	bl	8006aac <pvPortMalloc>
 800520e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005216:	205c      	movs	r0, #92	@ 0x5c
 8005218:	f001 fc48 	bl	8006aac <pvPortMalloc>
 800521c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30
 800522a:	e005      	b.n	8005238 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	f001 fd0b 	bl	8006c48 <vPortFree>
 8005232:	e001      	b.n	8005238 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d017      	beq.n	800526e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	2300      	movs	r3, #0
 800524a:	9303      	str	r3, [sp, #12]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	9302      	str	r3, [sp, #8]
 8005250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f80e 	bl	800527e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005262:	69f8      	ldr	r0, [r7, #28]
 8005264:	f000 f89c 	bl	80053a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005268:	2301      	movs	r3, #1
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e002      	b.n	8005274 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005274:	69bb      	ldr	r3, [r7, #24]
	}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	461a      	mov	r2, r3
 8005296:	21a5      	movs	r1, #165	@ 0xa5
 8005298:	f001 fdf6 	bl	8006e88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052a6:	3b01      	subs	r3, #1
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00b      	beq.n	80052d8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	617b      	str	r3, [r7, #20]
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01f      	beq.n	800531e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	e012      	b.n	800530a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	7819      	ldrb	r1, [r3, #0]
 80052ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	3334      	adds	r3, #52	@ 0x34
 80052f4:	460a      	mov	r2, r1
 80052f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d006      	beq.n	8005312 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b0f      	cmp	r3, #15
 800530e:	d9e9      	bls.n	80052e4 <prvInitialiseNewTask+0x66>
 8005310:	e000      	b.n	8005314 <prvInitialiseNewTask+0x96>
			{
				break;
 8005312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800531c:	e003      	b.n	8005326 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	2b37      	cmp	r3, #55	@ 0x37
 800532a:	d901      	bls.n	8005330 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800532c:	2337      	movs	r3, #55	@ 0x37
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005334:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800533a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	3304      	adds	r3, #4
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff f966 	bl	8004618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	3318      	adds	r3, #24
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff f961 	bl	8004618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800535a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800536a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	2200      	movs	r2, #0
 8005370:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f001 f93e 	bl	8006600 <pxPortInitialiseStack>
 8005384:	4602      	mov	r2, r0
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053a8:	f001 fa5e 	bl	8006868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005464 <prvAddNewTaskToReadyList+0xc4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005464 <prvAddNewTaskToReadyList+0xc4>)
 80053b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <prvAddNewTaskToReadyList+0xc8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053be:	4a2a      	ldr	r2, [pc, #168]	@ (8005468 <prvAddNewTaskToReadyList+0xc8>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053c4:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <prvAddNewTaskToReadyList+0xc4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d110      	bne.n	80053ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053cc:	f000 fc1e 	bl	8005c0c <prvInitialiseTaskLists>
 80053d0:	e00d      	b.n	80053ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053d2:	4b26      	ldr	r3, [pc, #152]	@ (800546c <prvAddNewTaskToReadyList+0xcc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053da:	4b23      	ldr	r3, [pc, #140]	@ (8005468 <prvAddNewTaskToReadyList+0xc8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d802      	bhi.n	80053ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005468 <prvAddNewTaskToReadyList+0xc8>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053ee:	4b20      	ldr	r3, [pc, #128]	@ (8005470 <prvAddNewTaskToReadyList+0xd0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <prvAddNewTaskToReadyList+0xd0>)
 80053f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005470 <prvAddNewTaskToReadyList+0xd0>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <prvAddNewTaskToReadyList+0xd4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <prvAddNewTaskToReadyList+0x74>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <prvAddNewTaskToReadyList+0xd4>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <prvAddNewTaskToReadyList+0xd8>)
 8005422:	441a      	add	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7ff f901 	bl	8004632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005430:	f001 fa4c 	bl	80068cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005434:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <prvAddNewTaskToReadyList+0xcc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <prvAddNewTaskToReadyList+0xc8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	429a      	cmp	r2, r3
 8005448:	d207      	bcs.n	800545a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800544a:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <prvAddNewTaskToReadyList+0xdc>)
 800544c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20001110 	.word	0x20001110
 8005468:	20000c3c 	.word	0x20000c3c
 800546c:	2000111c 	.word	0x2000111c
 8005470:	2000112c 	.word	0x2000112c
 8005474:	20001118 	.word	0x20001118
 8005478:	20000c40 	.word	0x20000c40
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d018      	beq.n	80054c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <vTaskDelay+0x64>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <vTaskDelay+0x32>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60bb      	str	r3, [r7, #8]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054b2:	f000 f883 	bl	80055bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fcf3 	bl	8005ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054be:	f000 f88b 	bl	80055d8 <xTaskResumeAll>
 80054c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80054ca:	4b07      	ldr	r3, [pc, #28]	@ (80054e8 <vTaskDelay+0x68>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20001138 	.word	0x20001138
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054fa:	463a      	mov	r2, r7
 80054fc:	1d39      	adds	r1, r7, #4
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f834 	bl	8004570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	9202      	str	r2, [sp, #8]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2300      	movs	r3, #0
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	460a      	mov	r2, r1
 800551a:	4922      	ldr	r1, [pc, #136]	@ (80055a4 <vTaskStartScheduler+0xb8>)
 800551c:	4822      	ldr	r0, [pc, #136]	@ (80055a8 <vTaskStartScheduler+0xbc>)
 800551e:	f7ff fe09 	bl	8005134 <xTaskCreateStatic>
 8005522:	4603      	mov	r3, r0
 8005524:	4a21      	ldr	r2, [pc, #132]	@ (80055ac <vTaskStartScheduler+0xc0>)
 8005526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005528:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <vTaskStartScheduler+0xc0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e001      	b.n	800553a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d102      	bne.n	8005546 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005540:	f000 fd04 	bl	8005f4c <xTimerCreateTimerTask>
 8005544:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d116      	bne.n	800557a <vTaskStartScheduler+0x8e>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	613b      	str	r3, [r7, #16]
}
 800555e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <vTaskStartScheduler+0xc4>)
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005568:	4b12      	ldr	r3, [pc, #72]	@ (80055b4 <vTaskStartScheduler+0xc8>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800556e:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <vTaskStartScheduler+0xcc>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005574:	f001 f8d4 	bl	8006720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005578:	e00f      	b.n	800559a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d10b      	bne.n	800559a <vTaskStartScheduler+0xae>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <vTaskStartScheduler+0xaa>
}
 800559a:	bf00      	nop
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08006f8c 	.word	0x08006f8c
 80055a8:	08005bdd 	.word	0x08005bdd
 80055ac:	20001134 	.word	0x20001134
 80055b0:	20001130 	.word	0x20001130
 80055b4:	2000111c 	.word	0x2000111c
 80055b8:	20001114 	.word	0x20001114

080055bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055c0:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <vTaskSuspendAll+0x18>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a03      	ldr	r2, [pc, #12]	@ (80055d4 <vTaskSuspendAll+0x18>)
 80055c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20001138 	.word	0x20001138

080055d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055e6:	4b42      	ldr	r3, [pc, #264]	@ (80056f0 <xTaskResumeAll+0x118>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <xTaskResumeAll+0x2e>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	603b      	str	r3, [r7, #0]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005606:	f001 f92f 	bl	8006868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800560a:	4b39      	ldr	r3, [pc, #228]	@ (80056f0 <xTaskResumeAll+0x118>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	4a37      	ldr	r2, [pc, #220]	@ (80056f0 <xTaskResumeAll+0x118>)
 8005612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005614:	4b36      	ldr	r3, [pc, #216]	@ (80056f0 <xTaskResumeAll+0x118>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d162      	bne.n	80056e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800561c:	4b35      	ldr	r3, [pc, #212]	@ (80056f4 <xTaskResumeAll+0x11c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05e      	beq.n	80056e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005624:	e02f      	b.n	8005686 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005626:	4b34      	ldr	r3, [pc, #208]	@ (80056f8 <xTaskResumeAll+0x120>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3318      	adds	r3, #24
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff f85a 	bl	80046ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f855 	bl	80046ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005646:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <xTaskResumeAll+0x124>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d903      	bls.n	8005656 <xTaskResumeAll+0x7e>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <xTaskResumeAll+0x124>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4a27      	ldr	r2, [pc, #156]	@ (8005700 <xTaskResumeAll+0x128>)
 8005664:	441a      	add	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7fe ffe0 	bl	8004632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005676:	4b23      	ldr	r3, [pc, #140]	@ (8005704 <xTaskResumeAll+0x12c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005680:	4b21      	ldr	r3, [pc, #132]	@ (8005708 <xTaskResumeAll+0x130>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005686:	4b1c      	ldr	r3, [pc, #112]	@ (80056f8 <xTaskResumeAll+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1cb      	bne.n	8005626 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005694:	f000 fb58 	bl	8005d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005698:	4b1c      	ldr	r3, [pc, #112]	@ (800570c <xTaskResumeAll+0x134>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056a4:	f000 f846 	bl	8005734 <xTaskIncrementTick>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80056ae:	4b16      	ldr	r3, [pc, #88]	@ (8005708 <xTaskResumeAll+0x130>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f1      	bne.n	80056a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80056c0:	4b12      	ldr	r3, [pc, #72]	@ (800570c <xTaskResumeAll+0x134>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056c6:	4b10      	ldr	r3, [pc, #64]	@ (8005708 <xTaskResumeAll+0x130>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <xTaskResumeAll+0x138>)
 80056d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e2:	f001 f8f3 	bl	80068cc <vPortExitCritical>

	return xAlreadyYielded;
 80056e6:	68bb      	ldr	r3, [r7, #8]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20001138 	.word	0x20001138
 80056f4:	20001110 	.word	0x20001110
 80056f8:	200010d0 	.word	0x200010d0
 80056fc:	20001118 	.word	0x20001118
 8005700:	20000c40 	.word	0x20000c40
 8005704:	20000c3c 	.word	0x20000c3c
 8005708:	20001124 	.word	0x20001124
 800570c:	20001120 	.word	0x20001120
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <xTaskGetTickCount+0x1c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005720:	687b      	ldr	r3, [r7, #4]
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20001114 	.word	0x20001114

08005734 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573e:	4b4f      	ldr	r3, [pc, #316]	@ (800587c <xTaskIncrementTick+0x148>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 8090 	bne.w	8005868 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005748:	4b4d      	ldr	r3, [pc, #308]	@ (8005880 <xTaskIncrementTick+0x14c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005750:	4a4b      	ldr	r2, [pc, #300]	@ (8005880 <xTaskIncrementTick+0x14c>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d121      	bne.n	80057a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800575c:	4b49      	ldr	r3, [pc, #292]	@ (8005884 <xTaskIncrementTick+0x150>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	603b      	str	r3, [r7, #0]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <xTaskIncrementTick+0x46>
 800577e:	4b41      	ldr	r3, [pc, #260]	@ (8005884 <xTaskIncrementTick+0x150>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	4b40      	ldr	r3, [pc, #256]	@ (8005888 <xTaskIncrementTick+0x154>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a3e      	ldr	r2, [pc, #248]	@ (8005884 <xTaskIncrementTick+0x150>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4a3e      	ldr	r2, [pc, #248]	@ (8005888 <xTaskIncrementTick+0x154>)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4b3e      	ldr	r3, [pc, #248]	@ (800588c <xTaskIncrementTick+0x158>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3301      	adds	r3, #1
 8005798:	4a3c      	ldr	r2, [pc, #240]	@ (800588c <xTaskIncrementTick+0x158>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	f000 fad4 	bl	8005d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005890 <xTaskIncrementTick+0x15c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d349      	bcc.n	800583e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057aa:	4b36      	ldr	r3, [pc, #216]	@ (8005884 <xTaskIncrementTick+0x150>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b4:	4b36      	ldr	r3, [pc, #216]	@ (8005890 <xTaskIncrementTick+0x15c>)
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	601a      	str	r2, [r3, #0]
					break;
 80057bc:	e03f      	b.n	800583e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057be:	4b31      	ldr	r3, [pc, #196]	@ (8005884 <xTaskIncrementTick+0x150>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d203      	bcs.n	80057de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005890 <xTaskIncrementTick+0x15c>)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057dc:	e02f      	b.n	800583e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe ff82 	bl	80046ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	3318      	adds	r3, #24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe ff79 	bl	80046ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fe:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <xTaskIncrementTick+0x160>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d903      	bls.n	800580e <xTaskIncrementTick+0xda>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <xTaskIncrementTick+0x160>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4a1f      	ldr	r2, [pc, #124]	@ (8005898 <xTaskIncrementTick+0x164>)
 800581c:	441a      	add	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7fe ff04 	bl	8004632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582e:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <xTaskIncrementTick+0x168>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	429a      	cmp	r2, r3
 8005836:	d3b8      	bcc.n	80057aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005838:	2301      	movs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583c:	e7b5      	b.n	80057aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800583e:	4b17      	ldr	r3, [pc, #92]	@ (800589c <xTaskIncrementTick+0x168>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005844:	4914      	ldr	r1, [pc, #80]	@ (8005898 <xTaskIncrementTick+0x164>)
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d901      	bls.n	800585a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800585a:	4b11      	ldr	r3, [pc, #68]	@ (80058a0 <xTaskIncrementTick+0x16c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005862:	2301      	movs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e004      	b.n	8005872 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <xTaskIncrementTick+0x170>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	4a0d      	ldr	r2, [pc, #52]	@ (80058a4 <xTaskIncrementTick+0x170>)
 8005870:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005872:	697b      	ldr	r3, [r7, #20]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20001138 	.word	0x20001138
 8005880:	20001114 	.word	0x20001114
 8005884:	200010c8 	.word	0x200010c8
 8005888:	200010cc 	.word	0x200010cc
 800588c:	20001128 	.word	0x20001128
 8005890:	20001130 	.word	0x20001130
 8005894:	20001118 	.word	0x20001118
 8005898:	20000c40 	.word	0x20000c40
 800589c:	20000c3c 	.word	0x20000c3c
 80058a0:	20001124 	.word	0x20001124
 80058a4:	20001120 	.word	0x20001120

080058a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ae:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <vTaskSwitchContext+0xa8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058b6:	4b27      	ldr	r3, [pc, #156]	@ (8005954 <vTaskSwitchContext+0xac>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058bc:	e042      	b.n	8005944 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80058be:	4b25      	ldr	r3, [pc, #148]	@ (8005954 <vTaskSwitchContext+0xac>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <vTaskSwitchContext+0xb0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e011      	b.n	80058f0 <vTaskSwitchContext+0x48>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <vTaskSwitchContext+0x42>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <vTaskSwitchContext+0x3e>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	491a      	ldr	r1, [pc, #104]	@ (800595c <vTaskSwitchContext+0xb4>)
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0e3      	beq.n	80058cc <vTaskSwitchContext+0x24>
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4a13      	ldr	r2, [pc, #76]	@ (800595c <vTaskSwitchContext+0xb4>)
 8005910:	4413      	add	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3308      	adds	r3, #8
 8005926:	429a      	cmp	r2, r3
 8005928:	d104      	bne.n	8005934 <vTaskSwitchContext+0x8c>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4a09      	ldr	r2, [pc, #36]	@ (8005960 <vTaskSwitchContext+0xb8>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4a06      	ldr	r2, [pc, #24]	@ (8005958 <vTaskSwitchContext+0xb0>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20001138 	.word	0x20001138
 8005954:	20001124 	.word	0x20001124
 8005958:	20001118 	.word	0x20001118
 800595c:	20000c40 	.word	0x20000c40
 8005960:	20000c3c 	.word	0x20000c3c

08005964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800598c:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <vTaskPlaceOnEventList+0x48>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3318      	adds	r3, #24
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe fe70 	bl	800467a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800599a:	2101      	movs	r1, #1
 800599c:	6838      	ldr	r0, [r7, #0]
 800599e:	f000 fa81 	bl	8005ea4 <prvAddCurrentTaskToDelayedList>
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000c3c 	.word	0x20000c3c

080059b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	617b      	str	r3, [r7, #20]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059da:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <vTaskPlaceOnEventListRestricted+0x54>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3318      	adds	r3, #24
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7fe fe25 	bl	8004632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295
 80059f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f000 fa54 	bl	8005ea4 <prvAddCurrentTaskToDelayedList>
	}
 80059fc:	bf00      	nop
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000c3c 	.word	0x20000c3c

08005a08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	60fb      	str	r3, [r7, #12]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3318      	adds	r3, #24
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fe56 	bl	80046ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a40:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab8 <xTaskRemoveFromEventList+0xb0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11d      	bne.n	8005a84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fe4d 	bl	80046ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	4b19      	ldr	r3, [pc, #100]	@ (8005abc <xTaskRemoveFromEventList+0xb4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d903      	bls.n	8005a66 <xTaskRemoveFromEventList+0x5e>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <xTaskRemoveFromEventList+0xb4>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <xTaskRemoveFromEventList+0xb8>)
 8005a74:	441a      	add	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7fe fdd8 	bl	8004632 <vListInsertEnd>
 8005a82:	e005      	b.n	8005a90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3318      	adds	r3, #24
 8005a88:	4619      	mov	r1, r3
 8005a8a:	480e      	ldr	r0, [pc, #56]	@ (8005ac4 <xTaskRemoveFromEventList+0xbc>)
 8005a8c:	f7fe fdd1 	bl	8004632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <xTaskRemoveFromEventList+0xc0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d905      	bls.n	8005aaa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <xTaskRemoveFromEventList+0xc4>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e001      	b.n	8005aae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20001138 	.word	0x20001138
 8005abc:	20001118 	.word	0x20001118
 8005ac0:	20000c40 	.word	0x20000c40
 8005ac4:	200010d0 	.word	0x200010d0
 8005ac8:	20000c3c 	.word	0x20000c3c
 8005acc:	20001124 	.word	0x20001124

08005ad0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <vTaskInternalSetTimeOutState+0x24>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <vTaskInternalSetTimeOutState+0x28>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	605a      	str	r2, [r3, #4]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20001128 	.word	0x20001128
 8005af8:	20001114 	.word	0x20001114

08005afc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	613b      	str	r3, [r7, #16]
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60fb      	str	r3, [r7, #12]
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b42:	f000 fe91 	bl	8006868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b46:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <xTaskCheckForTimeOut+0xc0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d102      	bne.n	8005b66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e023      	b.n	8005bae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b15      	ldr	r3, [pc, #84]	@ (8005bc0 <xTaskCheckForTimeOut+0xc4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d007      	beq.n	8005b82 <xTaskCheckForTimeOut+0x86>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d302      	bcc.n	8005b82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e015      	b.n	8005bae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d20b      	bcs.n	8005ba4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad2      	subs	r2, r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff99 	bl	8005ad0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e004      	b.n	8005bae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bae:	f000 fe8d 	bl	80068cc <vPortExitCritical>

	return xReturn;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20001114 	.word	0x20001114
 8005bc0:	20001128 	.word	0x20001128

08005bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <vTaskMissedYield+0x14>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	20001124 	.word	0x20001124

08005bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005be4:	f000 f852 	bl	8005c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005be8:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <prvIdleTask+0x28>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d9f9      	bls.n	8005be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bf0:	4b05      	ldr	r3, [pc, #20]	@ (8005c08 <prvIdleTask+0x2c>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c00:	e7f0      	b.n	8005be4 <prvIdleTask+0x8>
 8005c02:	bf00      	nop
 8005c04:	20000c40 	.word	0x20000c40
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	e00c      	b.n	8005c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a12      	ldr	r2, [pc, #72]	@ (8005c6c <prvInitialiseTaskLists+0x60>)
 8005c24:	4413      	add	r3, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fcd6 	bl	80045d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b37      	cmp	r3, #55	@ 0x37
 8005c36:	d9ef      	bls.n	8005c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c38:	480d      	ldr	r0, [pc, #52]	@ (8005c70 <prvInitialiseTaskLists+0x64>)
 8005c3a:	f7fe fccd 	bl	80045d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c3e:	480d      	ldr	r0, [pc, #52]	@ (8005c74 <prvInitialiseTaskLists+0x68>)
 8005c40:	f7fe fcca 	bl	80045d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c44:	480c      	ldr	r0, [pc, #48]	@ (8005c78 <prvInitialiseTaskLists+0x6c>)
 8005c46:	f7fe fcc7 	bl	80045d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c4a:	480c      	ldr	r0, [pc, #48]	@ (8005c7c <prvInitialiseTaskLists+0x70>)
 8005c4c:	f7fe fcc4 	bl	80045d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c50:	480b      	ldr	r0, [pc, #44]	@ (8005c80 <prvInitialiseTaskLists+0x74>)
 8005c52:	f7fe fcc1 	bl	80045d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <prvInitialiseTaskLists+0x78>)
 8005c58:	4a05      	ldr	r2, [pc, #20]	@ (8005c70 <prvInitialiseTaskLists+0x64>)
 8005c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <prvInitialiseTaskLists+0x7c>)
 8005c5e:	4a05      	ldr	r2, [pc, #20]	@ (8005c74 <prvInitialiseTaskLists+0x68>)
 8005c60:	601a      	str	r2, [r3, #0]
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000c40 	.word	0x20000c40
 8005c70:	200010a0 	.word	0x200010a0
 8005c74:	200010b4 	.word	0x200010b4
 8005c78:	200010d0 	.word	0x200010d0
 8005c7c:	200010e4 	.word	0x200010e4
 8005c80:	200010fc 	.word	0x200010fc
 8005c84:	200010c8 	.word	0x200010c8
 8005c88:	200010cc 	.word	0x200010cc

08005c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c92:	e019      	b.n	8005cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c94:	f000 fde8 	bl	8006868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c98:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <prvCheckTasksWaitingTermination+0x50>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fd21 	bl	80046ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <prvCheckTasksWaitingTermination+0x54>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce0 <prvCheckTasksWaitingTermination+0x54>)
 8005cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cbe:	f000 fe05 	bl	80068cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f810 	bl	8005ce8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e1      	bne.n	8005c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200010e4 	.word	0x200010e4
 8005ce0:	20001110 	.word	0x20001110
 8005ce4:	200010f8 	.word	0x200010f8

08005ce8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d108      	bne.n	8005d0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 ffa2 	bl	8006c48 <vPortFree>
				vPortFree( pxTCB );
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 ff9f 	bl	8006c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d0a:	e019      	b.n	8005d40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d103      	bne.n	8005d1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 ff96 	bl	8006c48 <vPortFree>
	}
 8005d1c:	e010      	b.n	8005d40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d00b      	beq.n	8005d40 <prvDeleteTCB+0x58>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	60fb      	str	r3, [r7, #12]
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <prvDeleteTCB+0x54>
	}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	@ (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d60:	e008      	b.n	8005d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a04      	ldr	r2, [pc, #16]	@ (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	200010c8 	.word	0x200010c8
 8005d84:	20001130 	.word	0x20001130

08005d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <xTaskGetSchedulerState+0x34>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d96:	2301      	movs	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	e008      	b.n	8005dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d9c:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <xTaskGetSchedulerState+0x38>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005da4:	2302      	movs	r3, #2
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e001      	b.n	8005dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dae:	687b      	ldr	r3, [r7, #4]
	}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	2000111c 	.word	0x2000111c
 8005dc0:	20001138 	.word	0x20001138

08005dc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d058      	beq.n	8005e8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dda:	4b2f      	ldr	r3, [pc, #188]	@ (8005e98 <xTaskPriorityDisinherit+0xd4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d00b      	beq.n	8005dfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60fb      	str	r3, [r7, #12]
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60bb      	str	r3, [r7, #8]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d02c      	beq.n	8005e8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d128      	bne.n	8005e8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fc54 	bl	80046ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e9c <xTaskPriorityDisinherit+0xd8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d903      	bls.n	8005e6c <xTaskPriorityDisinherit+0xa8>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	4a0c      	ldr	r2, [pc, #48]	@ (8005e9c <xTaskPriorityDisinherit+0xd8>)
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4a09      	ldr	r2, [pc, #36]	@ (8005ea0 <xTaskPriorityDisinherit+0xdc>)
 8005e7a:	441a      	add	r2, r3
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7fe fbd5 	bl	8004632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e8c:	697b      	ldr	r3, [r7, #20]
	}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000c3c 	.word	0x20000c3c
 8005e9c:	20001118 	.word	0x20001118
 8005ea0:	20000c40 	.word	0x20000c40

08005ea4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eae:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0x90>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb4:	4b20      	ldr	r3, [pc, #128]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fc16 	bl	80046ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d10a      	bne.n	8005ede <prvAddCurrentTaskToDelayedList+0x3a>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ece:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4819      	ldr	r0, [pc, #100]	@ (8005f3c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ed8:	f7fe fbab 	bl	8004632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005edc:	e026      	b.n	8005f2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ee6:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d209      	bcs.n	8005f0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef6:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe fbb9 	bl	800467a <vListInsert>
}
 8005f08:	e010      	b.n	8005f2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe fbaf 	bl	800467a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d202      	bcs.n	8005f2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f26:	4a08      	ldr	r2, [pc, #32]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	6013      	str	r3, [r2, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20001114 	.word	0x20001114
 8005f38:	20000c3c 	.word	0x20000c3c
 8005f3c:	200010fc 	.word	0x200010fc
 8005f40:	200010cc 	.word	0x200010cc
 8005f44:	200010c8 	.word	0x200010c8
 8005f48:	20001130 	.word	0x20001130

08005f4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f56:	f000 fb13 	bl	8006580 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd0 <xTimerCreateTimerTask+0x84>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d021      	beq.n	8005fa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f6a:	1d3a      	adds	r2, r7, #4
 8005f6c:	f107 0108 	add.w	r1, r7, #8
 8005f70:	f107 030c 	add.w	r3, r7, #12
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fb15 	bl	80045a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	9202      	str	r2, [sp, #8]
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	2302      	movs	r3, #2
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	460a      	mov	r2, r1
 8005f8c:	4911      	ldr	r1, [pc, #68]	@ (8005fd4 <xTimerCreateTimerTask+0x88>)
 8005f8e:	4812      	ldr	r0, [pc, #72]	@ (8005fd8 <xTimerCreateTimerTask+0x8c>)
 8005f90:	f7ff f8d0 	bl	8005134 <xTaskCreateStatic>
 8005f94:	4603      	mov	r3, r0
 8005f96:	4a11      	ldr	r2, [pc, #68]	@ (8005fdc <xTimerCreateTimerTask+0x90>)
 8005f98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f9a:	4b10      	ldr	r3, [pc, #64]	@ (8005fdc <xTimerCreateTimerTask+0x90>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	613b      	str	r3, [r7, #16]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fc4:	697b      	ldr	r3, [r7, #20]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	2000116c 	.word	0x2000116c
 8005fd4:	08006f94 	.word	0x08006f94
 8005fd8:	08006119 	.word	0x08006119
 8005fdc:	20001170 	.word	0x20001170

08005fe0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	@ 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xTimerGenericCommand+0x30>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	623b      	str	r3, [r7, #32]
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006010:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <xTimerGenericCommand+0x98>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d02a      	beq.n	800606e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b05      	cmp	r3, #5
 8006028:	dc18      	bgt.n	800605c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800602a:	f7ff fead 	bl	8005d88 <xTaskGetSchedulerState>
 800602e:	4603      	mov	r3, r0
 8006030:	2b02      	cmp	r3, #2
 8006032:	d109      	bne.n	8006048 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006034:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <xTimerGenericCommand+0x98>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	f107 0110 	add.w	r1, r7, #16
 800603c:	2300      	movs	r3, #0
 800603e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006040:	f7fe fc88 	bl	8004954 <xQueueGenericSend>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24
 8006046:	e012      	b.n	800606e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <xTimerGenericCommand+0x98>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	f107 0110 	add.w	r1, r7, #16
 8006050:	2300      	movs	r3, #0
 8006052:	2200      	movs	r2, #0
 8006054:	f7fe fc7e 	bl	8004954 <xQueueGenericSend>
 8006058:	6278      	str	r0, [r7, #36]	@ 0x24
 800605a:	e008      	b.n	800606e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800605c:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <xTimerGenericCommand+0x98>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	f107 0110 	add.w	r1, r7, #16
 8006064:	2300      	movs	r3, #0
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	f7fe fd76 	bl	8004b58 <xQueueGenericSendFromISR>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006070:	4618      	mov	r0, r3
 8006072:	3728      	adds	r7, #40	@ 0x28
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	2000116c 	.word	0x2000116c

0800607c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006086:	4b23      	ldr	r3, [pc, #140]	@ (8006114 <prvProcessExpiredTimer+0x98>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3304      	adds	r3, #4
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fb29 	bl	80046ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d023      	beq.n	80060f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	18d1      	adds	r1, r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	6978      	ldr	r0, [r7, #20]
 80060b6:	f000 f8d5 	bl	8006264 <prvInsertTimerInActiveList>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d020      	beq.n	8006102 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060c0:	2300      	movs	r3, #0
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2300      	movs	r3, #0
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	2100      	movs	r1, #0
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7ff ff88 	bl	8005fe0 <xTimerGenericCommand>
 80060d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d114      	bne.n	8006102 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60fb      	str	r3, [r7, #12]
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	4798      	blx	r3
}
 800610a:	bf00      	nop
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20001164 	.word	0x20001164

08006118 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	4618      	mov	r0, r3
 8006126:	f000 f859 	bl	80061dc <prvGetNextExpireTime>
 800612a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4619      	mov	r1, r3
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f805 	bl	8006140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006136:	f000 f8d7 	bl	80062e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800613a:	bf00      	nop
 800613c:	e7f0      	b.n	8006120 <prvTimerTask+0x8>
	...

08006140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800614a:	f7ff fa37 	bl	80055bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f866 	bl	8006224 <prvSampleTimeNow>
 8006158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d130      	bne.n	80061c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <prvProcessTimerOrBlockTask+0x3c>
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	429a      	cmp	r2, r3
 800616c:	d806      	bhi.n	800617c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800616e:	f7ff fa33 	bl	80055d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff81 	bl	800607c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800617a:	e024      	b.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006182:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <prvProcessTimerOrBlockTask+0x90>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <prvProcessTimerOrBlockTask+0x50>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <prvProcessTimerOrBlockTask+0x52>
 8006190:	2300      	movs	r3, #0
 8006192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006194:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <prvProcessTimerOrBlockTask+0x94>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fe ff93 	bl	80050cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061a6:	f7ff fa17 	bl	80055d8 <xTaskResumeAll>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061b0:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <prvProcessTimerOrBlockTask+0x98>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
}
 80061c0:	e001      	b.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061c2:	f7ff fa09 	bl	80055d8 <xTaskResumeAll>
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20001168 	.word	0x20001168
 80061d4:	2000116c 	.word	0x2000116c
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006220 <prvGetNextExpireTime+0x44>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <prvGetNextExpireTime+0x16>
 80061ee:	2201      	movs	r2, #1
 80061f0:	e000      	b.n	80061f4 <prvGetNextExpireTime+0x18>
 80061f2:	2200      	movs	r2, #0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <prvGetNextExpireTime+0x44>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	e001      	b.n	8006210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20001164 	.word	0x20001164

08006224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800622c:	f7ff fa72 	bl	8005714 <xTaskGetTickCount>
 8006230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006232:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <prvSampleTimeNow+0x3c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	429a      	cmp	r2, r3
 800623a:	d205      	bcs.n	8006248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800623c:	f000 f93a 	bl	80064b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800624e:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <prvSampleTimeNow+0x3c>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20001174 	.word	0x20001174

08006264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d812      	bhi.n	80062b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e01b      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800629e:	4b10      	ldr	r3, [pc, #64]	@ (80062e0 <prvInsertTimerInActiveList+0x7c>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fe f9e6 	bl	800467a <vListInsert>
 80062ae:	e012      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d206      	bcs.n	80062c6 <prvInsertTimerInActiveList+0x62>
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e007      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062c6:	4b07      	ldr	r3, [pc, #28]	@ (80062e4 <prvInsertTimerInActiveList+0x80>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fe f9d2 	bl	800467a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062d6:	697b      	ldr	r3, [r7, #20]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20001168 	.word	0x20001168
 80062e4:	20001164 	.word	0x20001164

080062e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	@ 0x38
 80062ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ee:	e0ce      	b.n	800648e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da19      	bge.n	800632a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	3304      	adds	r3, #4
 80062fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61fb      	str	r3, [r7, #28]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006320:	6850      	ldr	r0, [r2, #4]
 8006322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006324:	6892      	ldr	r2, [r2, #8]
 8006326:	4611      	mov	r1, r2
 8006328:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f2c0 80ae 	blt.w	800648e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe f9d2 	bl	80046ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006348:	463b      	mov	r3, r7
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff ff6a 	bl	8006224 <prvSampleTimeNow>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b09      	cmp	r3, #9
 8006356:	f200 8097 	bhi.w	8006488 <prvProcessReceivedCommands+0x1a0>
 800635a:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <prvProcessReceivedCommands+0x78>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006389 	.word	0x08006389
 8006364:	08006389 	.word	0x08006389
 8006368:	08006389 	.word	0x08006389
 800636c:	080063ff 	.word	0x080063ff
 8006370:	08006413 	.word	0x08006413
 8006374:	0800645f 	.word	0x0800645f
 8006378:	08006389 	.word	0x08006389
 800637c:	08006389 	.word	0x08006389
 8006380:	080063ff 	.word	0x080063ff
 8006384:	08006413 	.word	0x08006413
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	18d1      	adds	r1, r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a8:	f7ff ff5c 	bl	8006264 <prvInsertTimerInActiveList>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d06c      	beq.n	800648c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d061      	beq.n	800648c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	441a      	add	r2, r3
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063da:	f7ff fe01 	bl	8005fe0 <xTimerGenericCommand>
 80063de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d152      	bne.n	800648c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	61bb      	str	r3, [r7, #24]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006410:	e03d      	b.n	800648e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	617b      	str	r3, [r7, #20]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	18d1      	adds	r1, r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006458:	f7ff ff04 	bl	8006264 <prvInsertTimerInActiveList>
					break;
 800645c:	e017      	b.n	800648e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800645e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800646c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800646e:	f000 fbeb 	bl	8006c48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006472:	e00c      	b.n	800648e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006486:	e002      	b.n	800648e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <prvProcessReceivedCommands+0x1a6>
					break;
 800648c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800648e:	4b08      	ldr	r3, [pc, #32]	@ (80064b0 <prvProcessReceivedCommands+0x1c8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1d39      	adds	r1, r7, #4
 8006494:	2200      	movs	r2, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fbfc 	bl	8004c94 <xQueueReceive>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f47f af26 	bne.w	80062f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	3730      	adds	r7, #48	@ 0x30
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	2000116c 	.word	0x2000116c

080064b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064ba:	e049      	b.n	8006550 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006578 <prvSwitchTimerLists+0xc4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006578 <prvSwitchTimerLists+0xc4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe f909 	bl	80046ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d02f      	beq.n	8006550 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d90e      	bls.n	8006520 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650e:	4b1a      	ldr	r3, [pc, #104]	@ (8006578 <prvSwitchTimerLists+0xc4>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7fe f8ae 	bl	800467a <vListInsert>
 800651e:	e017      	b.n	8006550 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	2100      	movs	r1, #0
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff fd58 	bl	8005fe0 <xTimerGenericCommand>
 8006530:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	603b      	str	r3, [r7, #0]
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	e7fd      	b.n	800654c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006550:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <prvSwitchTimerLists+0xc4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1b0      	bne.n	80064bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800655a:	4b07      	ldr	r3, [pc, #28]	@ (8006578 <prvSwitchTimerLists+0xc4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006560:	4b06      	ldr	r3, [pc, #24]	@ (800657c <prvSwitchTimerLists+0xc8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <prvSwitchTimerLists+0xc4>)
 8006566:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006568:	4a04      	ldr	r2, [pc, #16]	@ (800657c <prvSwitchTimerLists+0xc8>)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	6013      	str	r3, [r2, #0]
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20001164 	.word	0x20001164
 800657c:	20001168 	.word	0x20001168

08006580 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006586:	f000 f96f 	bl	8006868 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800658a:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <prvCheckForValidListAndQueue+0x60>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d120      	bne.n	80065d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006592:	4814      	ldr	r0, [pc, #80]	@ (80065e4 <prvCheckForValidListAndQueue+0x64>)
 8006594:	f7fe f820 	bl	80045d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006598:	4813      	ldr	r0, [pc, #76]	@ (80065e8 <prvCheckForValidListAndQueue+0x68>)
 800659a:	f7fe f81d 	bl	80045d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800659e:	4b13      	ldr	r3, [pc, #76]	@ (80065ec <prvCheckForValidListAndQueue+0x6c>)
 80065a0:	4a10      	ldr	r2, [pc, #64]	@ (80065e4 <prvCheckForValidListAndQueue+0x64>)
 80065a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065a4:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <prvCheckForValidListAndQueue+0x70>)
 80065a6:	4a10      	ldr	r2, [pc, #64]	@ (80065e8 <prvCheckForValidListAndQueue+0x68>)
 80065a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065aa:	2300      	movs	r3, #0
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <prvCheckForValidListAndQueue+0x74>)
 80065b0:	4a11      	ldr	r2, [pc, #68]	@ (80065f8 <prvCheckForValidListAndQueue+0x78>)
 80065b2:	2110      	movs	r1, #16
 80065b4:	200a      	movs	r0, #10
 80065b6:	f7fe f92d 	bl	8004814 <xQueueGenericCreateStatic>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4a08      	ldr	r2, [pc, #32]	@ (80065e0 <prvCheckForValidListAndQueue+0x60>)
 80065be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065c0:	4b07      	ldr	r3, [pc, #28]	@ (80065e0 <prvCheckForValidListAndQueue+0x60>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065c8:	4b05      	ldr	r3, [pc, #20]	@ (80065e0 <prvCheckForValidListAndQueue+0x60>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	490b      	ldr	r1, [pc, #44]	@ (80065fc <prvCheckForValidListAndQueue+0x7c>)
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fd52 	bl	8005078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065d4:	f000 f97a 	bl	80068cc <vPortExitCritical>
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000116c 	.word	0x2000116c
 80065e4:	2000113c 	.word	0x2000113c
 80065e8:	20001150 	.word	0x20001150
 80065ec:	20001164 	.word	0x20001164
 80065f0:	20001168 	.word	0x20001168
 80065f4:	20001218 	.word	0x20001218
 80065f8:	20001178 	.word	0x20001178
 80065fc:	08006f9c 	.word	0x08006f9c

08006600 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b04      	subs	r3, #4
 8006610:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b04      	subs	r3, #4
 800661e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b04      	subs	r3, #4
 800662e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006630:	4a0c      	ldr	r2, [pc, #48]	@ (8006664 <pxPortInitialiseStack+0x64>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b14      	subs	r3, #20
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3b04      	subs	r3, #4
 8006646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f06f 0202 	mvn.w	r2, #2
 800664e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3b20      	subs	r3, #32
 8006654:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	08006669 	.word	0x08006669

08006668 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006672:	4b13      	ldr	r3, [pc, #76]	@ (80066c0 <prvTaskExitError+0x58>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d00b      	beq.n	8006694 <prvTaskExitError+0x2c>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60fb      	str	r3, [r7, #12]
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <prvTaskExitError+0x28>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60bb      	str	r3, [r7, #8]
}
 80066a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066a8:	bf00      	nop
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0fc      	beq.n	80066aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000014 	.word	0x20000014
	...

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066f8:	4808      	ldr	r0, [pc, #32]	@ (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800671a:	bf00      	nop
 800671c:	e000ed08 	.word	0xe000ed08

08006720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006726:	4b47      	ldr	r3, [pc, #284]	@ (8006844 <xPortStartScheduler+0x124>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a47      	ldr	r2, [pc, #284]	@ (8006848 <xPortStartScheduler+0x128>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10b      	bne.n	8006748 <xPortStartScheduler+0x28>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006748:	4b3e      	ldr	r3, [pc, #248]	@ (8006844 <xPortStartScheduler+0x124>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a3f      	ldr	r2, [pc, #252]	@ (800684c <xPortStartScheduler+0x12c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d10b      	bne.n	800676a <xPortStartScheduler+0x4a>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60fb      	str	r3, [r7, #12]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800676a:	4b39      	ldr	r3, [pc, #228]	@ (8006850 <xPortStartScheduler+0x130>)
 800676c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	22ff      	movs	r2, #255	@ 0xff
 800677a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <xPortStartScheduler+0x134>)
 8006790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006792:	4b31      	ldr	r3, [pc, #196]	@ (8006858 <xPortStartScheduler+0x138>)
 8006794:	2207      	movs	r2, #7
 8006796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006798:	e009      	b.n	80067ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800679a:	4b2f      	ldr	r3, [pc, #188]	@ (8006858 <xPortStartScheduler+0x138>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006858 <xPortStartScheduler+0x138>)
 80067a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b6:	2b80      	cmp	r3, #128	@ 0x80
 80067b8:	d0ef      	beq.n	800679a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067ba:	4b27      	ldr	r3, [pc, #156]	@ (8006858 <xPortStartScheduler+0x138>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f1c3 0307 	rsb	r3, r3, #7
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d00b      	beq.n	80067de <xPortStartScheduler+0xbe>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60bb      	str	r3, [r7, #8]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067de:	4b1e      	ldr	r3, [pc, #120]	@ (8006858 <xPortStartScheduler+0x138>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006858 <xPortStartScheduler+0x138>)
 80067e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006858 <xPortStartScheduler+0x138>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067f0:	4a19      	ldr	r2, [pc, #100]	@ (8006858 <xPortStartScheduler+0x138>)
 80067f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067fc:	4b17      	ldr	r3, [pc, #92]	@ (800685c <xPortStartScheduler+0x13c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <xPortStartScheduler+0x13c>)
 8006802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006808:	4b14      	ldr	r3, [pc, #80]	@ (800685c <xPortStartScheduler+0x13c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a13      	ldr	r2, [pc, #76]	@ (800685c <xPortStartScheduler+0x13c>)
 800680e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006814:	f000 f8da 	bl	80069cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006818:	4b11      	ldr	r3, [pc, #68]	@ (8006860 <xPortStartScheduler+0x140>)
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800681e:	f000 f8f9 	bl	8006a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006822:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <xPortStartScheduler+0x144>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a0f      	ldr	r2, [pc, #60]	@ (8006864 <xPortStartScheduler+0x144>)
 8006828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800682c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800682e:	f7ff ff63 	bl	80066f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006832:	f7ff f839 	bl	80058a8 <vTaskSwitchContext>
	prvTaskExitError();
 8006836:	f7ff ff17 	bl	8006668 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	e000ed00 	.word	0xe000ed00
 8006848:	410fc271 	.word	0x410fc271
 800684c:	410fc270 	.word	0x410fc270
 8006850:	e000e400 	.word	0xe000e400
 8006854:	20001268 	.word	0x20001268
 8006858:	2000126c 	.word	0x2000126c
 800685c:	e000ed20 	.word	0xe000ed20
 8006860:	20000014 	.word	0x20000014
 8006864:	e000ef34 	.word	0xe000ef34

08006868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	607b      	str	r3, [r7, #4]
}
 8006880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006882:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <vPortEnterCritical+0x5c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	4a0e      	ldr	r2, [pc, #56]	@ (80068c4 <vPortEnterCritical+0x5c>)
 800688a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800688c:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <vPortEnterCritical+0x5c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d110      	bne.n	80068b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006894:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <vPortEnterCritical+0x60>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	603b      	str	r3, [r7, #0]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <vPortEnterCritical+0x4a>
	}
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000014 	.word	0x20000014
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068d2:	4b12      	ldr	r3, [pc, #72]	@ (800691c <vPortExitCritical+0x50>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <vPortExitCritical+0x26>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068f2:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	4a08      	ldr	r2, [pc, #32]	@ (800691c <vPortExitCritical+0x50>)
 80068fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068fc:	4b07      	ldr	r3, [pc, #28]	@ (800691c <vPortExitCritical+0x50>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <vPortExitCritical+0x44>
 8006904:	2300      	movs	r3, #0
 8006906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f383 8811 	msr	BASEPRI, r3
}
 800690e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	20000014 	.word	0x20000014

08006920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006920:	f3ef 8009 	mrs	r0, PSP
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4b15      	ldr	r3, [pc, #84]	@ (8006980 <pxCurrentTCBConst>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f01e 0f10 	tst.w	lr, #16
 8006930:	bf08      	it	eq
 8006932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006944:	f380 8811 	msr	BASEPRI, r0
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f7fe ffaa 	bl	80058a8 <vTaskSwitchContext>
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f380 8811 	msr	BASEPRI, r0
 800695c:	bc09      	pop	{r0, r3}
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	6808      	ldr	r0, [r1, #0]
 8006962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006966:	f01e 0f10 	tst.w	lr, #16
 800696a:	bf08      	it	eq
 800696c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006970:	f380 8809 	msr	PSP, r0
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst>:
 8006980:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f7fe fec7 	bl	8005734 <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <xPortSysTickHandler+0x40>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <vPortSetupTimerInterrupt+0x38>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <vPortSetupTimerInterrupt+0x3c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	@ (8006a0c <vPortSetupTimerInterrupt+0x40>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	4a09      	ldr	r2, [pc, #36]	@ (8006a10 <vPortSetupTimerInterrupt+0x44>)
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ee:	4b04      	ldr	r3, [pc, #16]	@ (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e010 	.word	0xe000e010
 8006a04:	e000e018 	.word	0xe000e018
 8006a08:	20000008 	.word	0x20000008
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	e000e014 	.word	0xe000e014

08006a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a24 <vPortEnableVFP+0x10>
 8006a18:	6801      	ldr	r1, [r0, #0]
 8006a1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a1e:	6001      	str	r1, [r0, #0]
 8006a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a22:	bf00      	nop
 8006a24:	e000ed88 	.word	0xe000ed88

08006a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d915      	bls.n	8006a66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a3a:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <vPortValidateInterruptPriority+0x74>)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a44:	4b16      	ldr	r3, [pc, #88]	@ (8006aa0 <vPortValidateInterruptPriority+0x78>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	7afa      	ldrb	r2, [r7, #11]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20b      	bcs.n	8006a66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a66:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa4 <vPortValidateInterruptPriority+0x7c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa8 <vPortValidateInterruptPriority+0x80>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d90b      	bls.n	8006a8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	603b      	str	r3, [r7, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	e7fd      	b.n	8006a8a <vPortValidateInterruptPriority+0x62>
	}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	e000e3f0 	.word	0xe000e3f0
 8006aa0:	20001268 	.word	0x20001268
 8006aa4:	e000ed0c 	.word	0xe000ed0c
 8006aa8:	2000126c 	.word	0x2000126c

08006aac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	@ 0x28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ab8:	f7fe fd80 	bl	80055bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006abc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c30 <pvPortMalloc+0x184>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ac4:	f000 f924 	bl	8006d10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c34 <pvPortMalloc+0x188>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f040 8095 	bne.w	8006c00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01e      	beq.n	8006b1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006adc:	2208      	movs	r2, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d015      	beq.n	8006b1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f023 0307 	bic.w	r3, r3, #7
 8006af4:	3308      	adds	r3, #8
 8006af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <pvPortMalloc+0x6e>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	617b      	str	r3, [r7, #20]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d06f      	beq.n	8006c00 <pvPortMalloc+0x154>
 8006b20:	4b45      	ldr	r3, [pc, #276]	@ (8006c38 <pvPortMalloc+0x18c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d86a      	bhi.n	8006c00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b2a:	4b44      	ldr	r3, [pc, #272]	@ (8006c3c <pvPortMalloc+0x190>)
 8006b2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b2e:	4b43      	ldr	r3, [pc, #268]	@ (8006c3c <pvPortMalloc+0x190>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b34:	e004      	b.n	8006b40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d903      	bls.n	8006b52 <pvPortMalloc+0xa6>
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f1      	bne.n	8006b36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b52:	4b37      	ldr	r3, [pc, #220]	@ (8006c30 <pvPortMalloc+0x184>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d051      	beq.n	8006c00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2208      	movs	r2, #8
 8006b62:	4413      	add	r3, r2
 8006b64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	1ad2      	subs	r2, r2, r3
 8006b76:	2308      	movs	r3, #8
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d920      	bls.n	8006bc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <pvPortMalloc+0xfc>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	613b      	str	r3, [r7, #16]
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	e7fd      	b.n	8006ba4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bba:	69b8      	ldr	r0, [r7, #24]
 8006bbc:	f000 f90a 	bl	8006dd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c38 <pvPortMalloc+0x18c>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	4a1b      	ldr	r2, [pc, #108]	@ (8006c38 <pvPortMalloc+0x18c>)
 8006bcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bce:	4b1a      	ldr	r3, [pc, #104]	@ (8006c38 <pvPortMalloc+0x18c>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <pvPortMalloc+0x194>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d203      	bcs.n	8006be2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bda:	4b17      	ldr	r3, [pc, #92]	@ (8006c38 <pvPortMalloc+0x18c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	@ (8006c40 <pvPortMalloc+0x194>)
 8006be0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <pvPortMalloc+0x188>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bf6:	4b13      	ldr	r3, [pc, #76]	@ (8006c44 <pvPortMalloc+0x198>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	4a11      	ldr	r2, [pc, #68]	@ (8006c44 <pvPortMalloc+0x198>)
 8006bfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c00:	f7fe fcea 	bl	80055d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <pvPortMalloc+0x17a>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60fb      	str	r3, [r7, #12]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <pvPortMalloc+0x176>
	return pvReturn;
 8006c26:	69fb      	ldr	r3, [r7, #28]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3728      	adds	r7, #40	@ 0x28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20004e78 	.word	0x20004e78
 8006c34:	20004e8c 	.word	0x20004e8c
 8006c38:	20004e7c 	.word	0x20004e7c
 8006c3c:	20004e70 	.word	0x20004e70
 8006c40:	20004e80 	.word	0x20004e80
 8006c44:	20004e84 	.word	0x20004e84

08006c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d04f      	beq.n	8006cfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	425b      	negs	r3, r3
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4413      	add	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b25      	ldr	r3, [pc, #148]	@ (8006d04 <vPortFree+0xbc>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10b      	bne.n	8006c8e <vPortFree+0x46>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	e7fd      	b.n	8006c8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <vPortFree+0x66>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <vPortFree+0xbc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01e      	beq.n	8006cfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11a      	bne.n	8006cfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <vPortFree+0xbc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	401a      	ands	r2, r3
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cd4:	f7fe fc72 	bl	80055bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <vPortFree+0xc0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	4a09      	ldr	r2, [pc, #36]	@ (8006d08 <vPortFree+0xc0>)
 8006ce4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ce6:	6938      	ldr	r0, [r7, #16]
 8006ce8:	f000 f874 	bl	8006dd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cec:	4b07      	ldr	r3, [pc, #28]	@ (8006d0c <vPortFree+0xc4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	4a06      	ldr	r2, [pc, #24]	@ (8006d0c <vPortFree+0xc4>)
 8006cf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cf6:	f7fe fc6f 	bl	80055d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cfa:	bf00      	nop
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20004e8c 	.word	0x20004e8c
 8006d08:	20004e7c 	.word	0x20004e7c
 8006d0c:	20004e88 	.word	0x20004e88

08006d10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d1c:	4b27      	ldr	r3, [pc, #156]	@ (8006dbc <prvHeapInit+0xac>)
 8006d1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0307 	bic.w	r3, r3, #7
 8006d36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dbc <prvHeapInit+0xac>)
 8006d40:	4413      	add	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d48:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc0 <prvHeapInit+0xb0>)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc0 <prvHeapInit+0xb0>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <prvHeapInit+0xb4>)
 8006d70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d72:	4b14      	ldr	r3, [pc, #80]	@ (8006dc4 <prvHeapInit+0xb4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d7a:	4b12      	ldr	r3, [pc, #72]	@ (8006dc4 <prvHeapInit+0xb4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d90:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <prvHeapInit+0xb4>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc8 <prvHeapInit+0xb8>)
 8006d9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a09      	ldr	r2, [pc, #36]	@ (8006dcc <prvHeapInit+0xbc>)
 8006da6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006da8:	4b09      	ldr	r3, [pc, #36]	@ (8006dd0 <prvHeapInit+0xc0>)
 8006daa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dae:	601a      	str	r2, [r3, #0]
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	20001270 	.word	0x20001270
 8006dc0:	20004e70 	.word	0x20004e70
 8006dc4:	20004e78 	.word	0x20004e78
 8006dc8:	20004e80 	.word	0x20004e80
 8006dcc:	20004e7c 	.word	0x20004e7c
 8006dd0:	20004e8c 	.word	0x20004e8c

08006dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ddc:	4b28      	ldr	r3, [pc, #160]	@ (8006e80 <prvInsertBlockIntoFreeList+0xac>)
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e002      	b.n	8006de8 <prvInsertBlockIntoFreeList+0x14>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d8f7      	bhi.n	8006de2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d108      	bne.n	8006e16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d118      	bne.n	8006e5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <prvInsertBlockIntoFreeList+0xb0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d00d      	beq.n	8006e52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e008      	b.n	8006e64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e52:	4b0c      	ldr	r3, [pc, #48]	@ (8006e84 <prvInsertBlockIntoFreeList+0xb0>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e003      	b.n	8006e64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d002      	beq.n	8006e72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20004e70 	.word	0x20004e70
 8006e84:	20004e78 	.word	0x20004e78

08006e88 <memset>:
 8006e88:	4402      	add	r2, r0
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d100      	bne.n	8006e92 <memset+0xa>
 8006e90:	4770      	bx	lr
 8006e92:	f803 1b01 	strb.w	r1, [r3], #1
 8006e96:	e7f9      	b.n	8006e8c <memset+0x4>

08006e98 <__libc_init_array>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ed0 <__libc_init_array+0x38>)
 8006e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ed4 <__libc_init_array+0x3c>)
 8006e9e:	1b64      	subs	r4, r4, r5
 8006ea0:	10a4      	asrs	r4, r4, #2
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	42a6      	cmp	r6, r4
 8006ea6:	d109      	bne.n	8006ebc <__libc_init_array+0x24>
 8006ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed8 <__libc_init_array+0x40>)
 8006eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8006edc <__libc_init_array+0x44>)
 8006eac:	f000 f826 	bl	8006efc <_init>
 8006eb0:	1b64      	subs	r4, r4, r5
 8006eb2:	10a4      	asrs	r4, r4, #2
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	d105      	bne.n	8006ec6 <__libc_init_array+0x2e>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec0:	4798      	blx	r3
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__libc_init_array+0xc>
 8006ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eca:	4798      	blx	r3
 8006ecc:	3601      	adds	r6, #1
 8006ece:	e7f2      	b.n	8006eb6 <__libc_init_array+0x1e>
 8006ed0:	08007d8c 	.word	0x08007d8c
 8006ed4:	08007d8c 	.word	0x08007d8c
 8006ed8:	08007d8c 	.word	0x08007d8c
 8006edc:	08007d90 	.word	0x08007d90

08006ee0 <memcpy>:
 8006ee0:	440a      	add	r2, r1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee8:	d100      	bne.n	8006eec <memcpy+0xc>
 8006eea:	4770      	bx	lr
 8006eec:	b510      	push	{r4, lr}
 8006eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	d1f9      	bne.n	8006eee <memcpy+0xe>
 8006efa:	bd10      	pop	{r4, pc}

08006efc <_init>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr

08006f08 <_fini>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr
